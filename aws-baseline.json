[
    {
      "name": "AWS Route 53 Domain Name Renewal (30 days before expiration)",
      "description": "Ensure that all the domain names registered with AWS Route 53 or transferred to AWS Route 53 are renewed 30 days before their expiry",
      "severity": "Informational",
      "logic": "Route53Domain should not have expirationTime before(30, 'days')",
      "remediation": "\n**From Portal**\nUse following steps to validate expiry date for a domain:\n1. Navigate to Route 53 dashboard at https://console.aws.amazon.com/route53/.\n2. In the left navigation panel, under Domains, click Registered Domains.\n3. Select the relevant domain.\n4. On Your Domains 'domain name' page, in the domain name configuration section, check the domain expiration date -  next to 'Expires on'. If the selected domain is about to expire within 30 days, continue with the renewal process.\n\nUse following steps to enable auto renew for the domains expiring within 30 days:\n1. Sign in to the AWS Management Console and open the Route 53 console.\n2. In the navigation pane, choose Registered Domains.\n3. Choose the name of the domain that you want to update.\n4. Choose Enable to turn on automatic renewal. Once the renewal process for the domain is successfully completed, AWS will send you an email with the renewal details.\n\n**From TF**\n```\nresource \"aws_route53domains_registered_domain\" \"example\" {\ndomain_name = \"example.com\"\nauto_renew =  true\nname_server {\nname = \"example.com\"\n}\n}\n```\nNote: 'auto_renew = true/false' parameter is used to ensure whether the domain registration is set to renew automatically or not.\n\n**From Command Line**\nRun following command to enable the Auto Renew feature for the selected domain:\n```\naws route53domains enable-domain-auto-renew --domain-name DOMAIN_NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-enable-disable-auto-renewal.html\n2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-extend.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53domains_registered_domain#auto_renew\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/route53domains/enable-domain-auto-renew.html\n5. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html ",
      "complianceTag": "DNS Management",
      "logicHash": "564FPZUMq5MhOnKuGOztrQ",
      "ruleId": "D9.AWS.DNS.05",
      "category": "Baseline"
    },
    {
      "name": "AWS Route 53 Domain Name Renewal (7 days before expiration)",
      "description": "Ensure that all the domain names registered with AWS Route 53 or transferred to AWS Route 53 are renewed 7 days before their expiry",
      "severity": "Informational",
      "logic": "Route53Domain should not have expirationTime before(7, 'days')",
      "remediation": "\n**From Portal**\nUse following steps to validate expiry date for a domain:\n1. Navigate to Route 53 dashboard at https://console.aws.amazon.com/route53/.\n2. In the left navigation panel, under Domains, click Registered Domains.\n3. Select the relevant domain.\n4. On Your Domains 'domain name' page, in the domain name configuration section, check the domain expiration date -  next to 'Expires on'. If the selected domain is about to expire within 7 days, continue with the renewal process.\n\nUse following steps to enable auto renew for the domains expiring within 7 days:\n1. Sign in to the AWS Management Console and open the Route 53 console.\n2. In the navigation pane, choose Registered Domains.\n3. Choose the name of the domain that you want to update.\n4. Choose Enable to turn on automatic renewal. Once the renewal process for the domain is successfully completed, AWS will send you an email with the renewal details.\n\n**From TF**\n```\nresource \"aws_route53domains_registered_domain\" \"example\" {\ndomain_name = \"example.com\"\nauto_renew =  true\nname_server {\nname = \"example.com\"\n}\n}\n```\nNote: 'auto_renew = true/false' parameter is used to ensure whether the domain registration is set to renew automatically or not.\n\n**From Command Line**\nRun following command to enable the Auto Renew feature for the selected domain:\n```\naws route53domains enable-domain-auto-renew --domain-name DOMAIN_NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-enable-disable-auto-renewal.html\n2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-extend.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53domains_registered_domain#auto_renew\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/route53domains/enable-domain-auto-renew.html\n5. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html ",
      "complianceTag": "DNS Management",
      "logicHash": "nw3dvVdC/LUEPB61aCR6fQ",
      "ruleId": "D9.AWS.DNS.04",
      "category": "Baseline"
    },
    {
      "name": "Amazon EFS must have an associated tag",
      "description": "Tags are key-value pairs that you attach to AWS resources to better organize them. They are particularly useful when you have many resources of the same type. By using tags, customers with multiple Amazon EFS can easily access and analyze a specific set by filtering on those that contain the same tag. Two of the key advantages of tagging your Amazon EFS are: Grouping and Filtering and Cost allocation.",
      "severity": "Informational",
      "logic": "EFS should have tags",
      "remediation": "\n**From Portal**\n1. Navigate to https://console.aws.amazon.com/efs/\n2. Choose the File System in the left navigation panel.\n3. Select the desired file system and click on Tags.\n4. Under Tags, choose Manage tags.\n5. Choose Add tag, and then enter a Tag Key and an optional Value. To add more tags, repeat this step.\n6. Choose Save.\n\n**From TF**\n```\nresource \"aws_efs_file_system\" \"example\" {\ncreation_token = \"FILE_SYSTEM_NAME\"\n\ntags = {\nName = \"TAG_NAME\"\n}\n}\n```\n\n**References**\n1. https://docs.aws.amazon.com/efs/latest/ug/manage-fs-tags.html\n2. https://docs.aws.amazon.com/efs/latest/ug/API_TagResource.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_file_system ",
      "complianceTag": "Cloud Assets Management",
      "logicHash": "1JIEUsfnGSg4XhxFMPQ8Fg",
      "ruleId": "D9.AWS.AS.04",
      "category": "Baseline"
    },
    {
      "name": "Enable AWS Route 53 Domain Auto Renew",
      "description": "Ensure that AWS Route 53 Auto Renew feature is enabled to automatically renew your domain names as the expiration date approaches",
      "severity": "Informational",
      "logic": "Route53Domain should not have autoRenew=false",
      "remediation": "\n**From Portal**\nUse following steps to enable automatic renewal for a domain:\n1. Sign in to the AWS Management Console and open the Route 53 console.\n2. In the navigation pane, choose Registered Domains.\n3. Choose the name of the domain that you want to update.\n4. Choose Enable to turn on automatic renewal.\n\n**From TF**\n```\nresource \"aws_route53domains_registered_domain\" \"example\" {\ndomain_name = \"example.com\"\nauto_renew =  true\nname_server {\nname = \"example.com\"\n}\n}\n```\nNote: 'auto_renew = true/false' parameter is used to ensure whether the domain registration is set to renew automatically or not.\n\n**From Command Line**\nRun following command to enable the Auto Renew feature for the selected domain:\n```\naws route53domains enable-domain-auto-renew --domain-name DOMAIN_NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-enable-disable-auto-renewal.html\n2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-extend.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53domains_registered_domain#auto_renew\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/route53domains/enable-domain-auto-renew.html ",
      "complianceTag": "DNS Management",
      "logicHash": "3Ofsoa9WtC1Ef4D2ggU1aA",
      "ruleId": "D9.AWS.DNS.02",
      "category": "Baseline"
    },
    {
      "name": "Enable AWS Route 53 Domain Transfer Lock",
      "description": "Ensure that your AWS Route 53 registered domains are locked to prevent any unauthorized transfers to another domain name registrar",
      "severity": "Informational",
      "logic": "Route53Domain should not have transferLock=false",
      "remediation": "\n**From Portal**\nUse following steps to enable Transfer Lock for domains:\n1. Sign in to the AWS Management Console and open the Route 53 console at https://console.aws.amazon.com/route53/.\n2. In the navigation pane, choose Registered Domains.\n3. Choose the name of the domain that you want to update.\n4. Click on the 'Domain Name' as a link to access the configuration settings and click on the 'Enable' option next to 'Transfer Lock'.\n\n**From TF**\n```\nresource \"aws_route53domains_registered_domain\" \"example\" {\ndomain_name = \"example.com\"\nauto_renew =  true\ntransfer_lock = true\nname_server {\nname = \"example.com\"\n}\n}\n```\n\n**From Command Line**\nRun following command to enable the transfer lock on a Domains.\n```\naws route53domains enable-domain-transfer-lock --region REGION_NAME --domain-name DOMAIN_NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-lock.html\n2. https://awscli.amazonaws.com/v2/documentation/api/2.4.19/reference/route53domains/enable-domain-transfer-lock.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53domains_registered_domain ",
      "complianceTag": "DNS Management",
      "logicHash": "U+nfNp3v9mWzW8/T67Yu1A",
      "ruleId": "D9.AWS.DNS.03",
      "category": "Baseline"
    },
    {
      "name": "Enable container's health checks",
      "description": "Amazon Elastic Container Service (ECS) health checks give you more control over monitoring the health of your tasks and improve the ability of the ECS service scheduler to ensure your services are healthy. If health checks are not configured for this container in its task definition, then it reports the health status as UNKNOWN.",
      "severity": "Informational",
      "logic": "EcsTask should not have healthStatus = 'UNKNOWN'",
      "remediation": "\n**From Portal**\nUse following steps to verify current status of task definition.\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. Navigate to ECS.\n3. Select the Region that contains your task definition.\n4. In the left pane, select Task Definitions.\n5. Verify the Status of last revision. it should be ACTIVE not UNKNOWN.\n\nCreate a new task definition revision to enable container's health check.\n1. Navigate to ECS.\n2. Select the Region that contains your task definition.\n3. In the left pane, select Task Definitions.\n4. Check the task definition and click Create new revision.\n5. On the Create new revision of task definition page, make changes. For example, to change the existing container definitions (such as the container image, memory limits, or port mappings), select the container, make the changes, and then choose Update.\n6. Select Create.\n7. If your task definition is used in a service, update your service with the updated task definition and deactivate the previous task definition.\n\nNote: Follow reference section for more details on updating a service.\n\n**From Command Line**\nUse following command to create new task definition revision with a JSON string parameter.\n\nNote: Container definitions is provided as a JSON string parameter with escaped double quotes.\n```\naws ecs register-task-definition --family task_definition_family --container-definitions \"[{\"name\":\"sleep\",\"image\":\"busybox\",\"cpu\":10,\"command\":[\"sleep\",\"360\"],\"memory\":10,\"essential\":true}]\"\n```\nUse following command to change the task definition used in a service.\n```\naws ecs update-service --service service_name --task-definition task_definition_ARN\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/update-task-definition.html\n2. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_healthcheck\n3. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/create-task-definition-classic.html\n4. https://aws.amazon.com/premiumsupport/knowledge-center/ecs-task-container-health-check-failures/\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecs/register-task-definition.html\n6. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecs/update-service.html ",
      "complianceTag": "Operational",
      "logicHash": "4fO5vMDNtVWUgDzGHABEZg",
      "ruleId": "D9.AWS.OPE.03",
      "category": "Baseline"
    },
    {
      "name": "Ensure AWS Lambda functions have tracing enabled",
      "description": "AWS Lambda functions should have TracingConfig enabled since it activates the AWS X-Ray service.  AWS X-Ray service collects information on requests that a specific function performed. It reduces the investigation, debugging and diagnostics time and effort. The value can be either PassThrough or Active. If PassThrough, Lambda will only trace the request from an upstream service if it contains a tracing header with 'sampled=1'. If Active, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision. It is recommended to use 'Active'.",
      "severity": "Informational",
      "logic": "Lambda should not have tracingConfig.mode='PassThrough'",
      "remediation": "\n**From Portal**\n1. Log in to the AWS Management Console and open the Amazon Lambda console.\n2. Open the function you want to modify.\n3. Click the Configuration tab.\n4. Open the Monitoring and operations tools on the left side.\n5. Click Edit and enable Active tracing for AWS X-ray.\n6. Click Save.\n\n**From TF**\n```\nresource \"aws_lambda_function\" \"active\" {\ntracing_config {\n-  mode = \"PassThrough\"\n+  mode = \"Active\"\n}\n}\n```\n\n**From Command Line**\n```\naws lambda update-function-configuration --function-name lambda_function_name --tracing-config Mode=Active\n```\n\n**References**\n1. https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/update-function-configuration.html ",
      "complianceTag": "Operational",
      "logicHash": "+LQWVKps1YRogPibMGt8Vg",
      "ruleId": "D9.AWS.OPE.07",
      "category": "Baseline"
    },
    {
      "name": "Ensure AWS RDS instances have Automatic Backup set up",
      "description": "Automatic Backup creates a storage volume snapshot of your DB instance, backing up the entire DB instance and not just individual databases which provide for point-in-time recovery. The automatic backup will happen during a specified backup window time and keeps the backups for a period of time defined in the retention period. It is recommended to set Automatic Backups for your critical RDS servers that will help in the data restoration process.",
      "severity": "Informational",
      "logic": "RDS should have backupRetentionPeriod>0",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console and open the Amazon RDS console at https://console.aws.amazon.com/rds/.\n2. In the navigation pane, choose Databases, and then choose the DB instance that you want to modify.\n3. Choose Modify.\n4. In 'Backup' section,\na. From the 'Backup Retention Period' drop-down list, select the number of days to retain automatic backups of this DB instance\nb. Select 'Start Time' and 'Duration' in 'Backup window', which is the daily time range (in UTC) during which automated backups will be performed\n5. Click 'Continue'\n6. On the confirmation page, select 'Modify DB Instance' to save your changes\n\n**From TF**\n```\nresource \"aws_db_instance\" \"default\" {\nallocated_storage    = 10\nengine               = \"mysql\"\nengine_version       = \"5.7\"\ninstance_class       = \"db.t3.micro\"\nname                 = \"mydb\"\nusername             = \"foo\"\npassword             = \"foobarbaz\"\nparameter_group_name = \"default.mysql5.7\"\nskip_final_snapshot  = true\n+ backup_retention_period = 5 # any positive number\n}\n```\n\n**From Command Line**\naws rds modify-db-instance --region REGION --db-instance-identifier DBINSTANCE --backup-retention-period NUMBER_OF_DAYS --apply-immediately\n\n**References**\n1. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html\n2. https://aws.amazon.com/rds/faqs/\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance",
      "complianceTag": "Backup and Disaster Recovery",
      "logicHash": "gL5dKBHr+iM2AkfWm//7Cw",
      "ruleId": "D9.AWS.DR.01",
      "category": "Baseline"
    },
    {
      "name": "Ensure AWS RDS retention policy is at least 7 days",
      "description": "RDS clusters should have Retention Policies for Backups configured to retain at least 7 days of backups.",
      "severity": "Informational",
      "logic": "RDS should have backupRetentionPeriod>6",
      "remediation": "\n**From Portal**\nConfigure your RDS backup retention policy to be at least 7 days.\n1. Sign in to the AWS Management Console and open the Amazon RDS console at https://console.aws.amazon.com/rds/.\n2. In the navigation pane, choose Databases, and then choose the DB instance that you want to modify.\n3. Choose Modify.\n4. In 'Backup' section,\na. From the 'Backup Retention Period' options set the retention period to at least 7 days.\nb. Select 'Start Time' and 'Duration' in 'Backup window', which is the daily time range (in UTC) during which automated backups will be performed\n5. Click 'Continue'\n6. On the confirmation page, select 'Modify DB Instance' to save your changes\n\n\n**From TF**\n```\nresource \"aws_db_instance\" \"default\" {\nallocated_storage    = 10\nengine               = \"mysql\"\nengine_version       = \"5.7\"\ninstance_class       = \"db.t3.micro\"\nname                 = \"mydb\"\nusername             = \"foo\"\npassword             = \"foobarbaz\"\nparameter_group_name = \"default.mysql5.7\"\nskip_final_snapshot  = true\n+ backup_retention_period = 7 # number should be 7 or more\n}\n```\n\n**From Command Line**\naws rds modify-db-instance --region REGION --db-instance-identifier DBINSTANCE --backup-retention-period 7 --apply-immediately\n\n**References**\n1. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html\n2. https://aws.amazon.com/rds/faqs/\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance",
      "complianceTag": "Backup and Disaster Recovery",
      "logicHash": "SE16bmra/4/6Dmq5QMuiCQ",
      "ruleId": "D9.AWS.DR.03",
      "category": "Baseline"
    },
    {
      "name": "Ensure Amazon DynamoDB tables have continuous backups enabled",
      "description": "Continuous Backups in DynamoDB will prevent from loss of data and the features will include Global secondary indexes (GSIs), Local secondary indexes (LSIs), Streams, Provisioned read and write capacity. Restored table items are consistent with LSI projections and eventually consistent with GSI projections.",
      "severity": "Informational",
      "logic": "DynamoDbTable should have continuousBackups.pointInTimeRecoveryDescription.pointInTimeRecoveryStatus='ENABLED'",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console and open the DynamoDB console.\n2. In the navigation pane on the left side of the console, choose Tables.\n3. In the list of tables, choose the table you want to update backups\n4. Click on the Backups tab of the table,\n5. Click on edit tab under 'Point-in-time recovery (PITR)' section.\n6. Checkmark on 'Enable point-in-time-recovery' and click save changes.\n\n**From TF**\n```\nresource \"aws_dynamodb_table\" \"example\" {\npoint_in_time_recovery {\nenabled = true\n}\nother required fields here\n}\n```\n\n**From Command Line**\nThe following command update-continuous-backups enables point-in-time recovery for specific table.\n```\naws dynamodb update-continuous-backups --table-name EXAMPLE_NAME --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\n```\n\n**References**\n1. https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-continuous-backups.html ",
      "complianceTag": "Backup and Disaster Recovery",
      "logicHash": "aP+8rCoYfSTyjD3NkrYEaA",
      "ruleId": "D9.AWS.DR.04",
      "category": "Baseline"
    },
    {
      "name": "Ensure VIRTUAL or HARDWARE MFA is enabled for the 'root' account",
      "description": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.\nWhen virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. ('non-personal virtual MFA') This lessens the risks of losing access to the MFA due to  device loss, device trade-in or if the individual owning the device is no longer employed at the company.\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.\nNote: Government cloud accounts do not have a root user, and so, should exclude this rule in the CloudGuard UI -> Posture Management -> Exclusions -> Create New Exclusion (for each relevant ruleset)",
      "severity": "Critical",
      "logic": "IamUser where name like '%root_account%' should have mfaType in('Virtual','Hardware')",
      "remediation": "\n**From Portal**\nHardware MFA:\nNote: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n1. Login to AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. Choose Dashboard, and under Security Status, expand Activate MFA on your root account\n3. Choose Activate MFA\n4. In the wizard, choose A hardware MFA device and then choose Next Step\n5. In the Serial Number box, enter the serial number that is found on the back of the MFA device\n6. In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device. You might need to press the button on the front of the device to display the number\n7. Wait 30 seconds while the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box. You might need to press the button on the front of the device again to display the second number\n8. Choose Next Step. The MFA device is now associated with the AWS account. The next time you use your AWS account credentials to sign in, you must type a code from the hardware MFA device.\n\nVirtual MFA:\nNote: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n1. Login to AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. Choose Dashboard, and under Security Status, expand Activate MFA on your root account\n3. Choose Activate MFA\n4. In the wizard, choose A virtual MFA device and then choose Next Step\n5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device)\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n- Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code\n- In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application\nWhen you are finished, the virtual MFA device starts generating one-time passwords\n8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA\n\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_physical.html#enable-hw-mfa-for-root\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-root",
      "complianceTag": "Identity and Access Management",
      "logicHash": "iRVfGpftQivOb3eqDdh2Lw",
      "ruleId": "D9.AWS.IAM.18",
      "category": ""
    },
    {
      "name": "Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
      "description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.",
      "severity": "Critical",
      "logic": "SecurityGroup should not have inboundRules with [ scope='0.0.0.0/0' and ( ( port<=22 and portTo>=22) or ( port<=3389 and portTo>=3389 ) ) ]",
      "remediation": "\n**From Portal**\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. In the left pane, click Security Groups\n3. For each security group, perform the following:\n4. Select the security group\n5. Click the Inbound Rules tab\n6. Click the Edit inbound rules button\n7. Identify the rules to be edited or removed\n8. Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule\n9. Click Save rules\n\n**From Command Line**\n1.  List all security groups with an ingress rule of 0.0.0.0/0.\n```\naws ec2 describe-security-groups --filters Name=ip-permission.cidr,Values='0.0.0.0/0' --query \"SecurityGroups[*].{Name:GroupName,ID:GroupId}\"\n```\n2. Remove the rule which has port 22 or 3389 when ingress is 0.0.0.0/0.\n```\naws ec2 revoke-security-group-ingress --region REGION --group-name GROUP_NAME --protocol tcp --port 22 --cidr 0.0.0.0/0\naws ec2 revoke-security-group-ingress --region REGION --group-name GROUP_NAME --protocol tcp --port 3389 --cidr 0.0.0.0/0\n```\n3. Now add the inbound rules with different parameters, When port is 22 or 3389 set cidr value other than 0.0.0.0/0 e.g. 10.0.0.0/24 or any suitable range.\n```\naws ec2 authorize-security-group-ingress --region REGION --group-name GROUP_NAME --protocol PROTOCOL --port PORT --cidr CIDR_BLOCK\n```\n**From CFT**\n1. Use the resource AWS::EC2::SecurityGroup. When port is 22 or 3389, make sure property AWS::EC2::SecurityGroup::SecurityGroupIngress::CidrIp has specific cidr range other than \"0.0.0.0/0\" e.g. \"10.0.0.1/32\" or any suitable range. See below example template;\n```\nResources:\nGoodSecurityGroup:\nType: AWS::EC2::SecurityGroup\nProperties:\n...\nSecurityGroupIngress:\n- IpProtocol: tcp\nFromPort: 3389\nToPort: 3389\nCidrIp: 10.0.0.0/24\n...\n\n```\n**From TF**\n1. Use the resource aws_security_group. When port is 22 or 3389, make sure property ingress.cidr_blocks has specific cidr range other than \"0.0.0.0/0\" e.g. \"10.0.0.1/32\" or any suitable range. See below example template;\n```\nresource \"aws_security_group\" \"\" {\n...\ningress {\nfrom_port        = 22\nto_port          = 22\nprotocol         = \"tcp\"\ncidr_blocks      = [\"10.0.0.1/32\"]\n}\n...\n}\n\n```\n**References**\n1. https://workbench.cisecurity.org/sections/615826/recommendations/1009568\n2. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/revoke-security-group-ingress.html#\n3. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group",
      "complianceTag": "Network Security",
      "logicHash": "PnrfhC1TKURVUm8jV02cxg",
      "ruleId": "D9.AWS.NET.77",
      "category": "Baseline"
    },
    {
      "name": "Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
      "description": "Amazon S3 provides `Block public access (bucket settings)` and `Block public access (account settings)` to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, `Block public access (bucket settings)` prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, `Block public access (account settings)` prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
      "severity": "Critical",
      "logic": "S3Bucket should have (accessPublicBlock.blockPublicAcls=true or accountAccessPublicBlock.blockPublicAcls=true) and (accessPublicBlock.ignorePublicAcls=true or accountAccessPublicBlock.ignorePublicAcls=true) and (accessPublicBlock.blockPublicPolicy=true or accountAccessPublicBlock.blockPublicPolicy=true) and (accessPublicBlock.restrictPublicBuckets=true or accountAccessPublicBlock.restrictPublicBuckets=true)",
      "remediation": "\n**From Console**\n1. Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/\n2. Select the Check box next to the Bucket\n3. Click on 'Edit public access settings'\n4. Click 'Block all public access'\n5. Repeat for all the buckets in your AWS account that contain sensitive data\n\n**From TF**\nTo enable block public access bucket setting, add following in a terraform file:\n```\nresource \"aws_s3_bucket_public_access_block\" \"public_access_block_example\" {\nbucket = BUCKET-NAME\nblock_public_acls = true\nblock_public_policy = true\nrestrict_public_buckets = true\nignore_public_acls = true\n}\n```\n\n**From Command Line**\nTo set Block Public Access configurations, run:\n```\naws s3api put-public-access-block --bucket BUCKET_NAME --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#console-block-public-access-options\n2. https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-bucket.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_account_public_access_block\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/put-public-access-block.html\n",
      "complianceTag": "Network Security",
      "logicHash": "YuRxOMrOjPghCAPTgKi4Tw",
      "ruleId": "D9.AWS.NET.72",
      "category": ""
    },
    {
      "name": "Ensure the default security group of every VPC restricts all traffic",
      "description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic. Configuring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.",
      "severity": "Critical",
      "logic": "SecurityGroup where name like 'default' and (region='ap_southeast_1' or region='us_east_1') should have inboundRules isEmpty() and outboundRules isEmpty()",
      "remediation": "\n**From Portal**\nSecurity Group Members Perform the following to implement the prescribed state:\n1. Identify AWS resources that exist within the default security group\n2. Create a set of least privilege security groups for those resources\n3. Place the resources in those security groups\n4. Remove the resources noted in #1 from the default security group\n\nSecurity Group State\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n3. In the left pane, click 'Security Groups'.\n4. For each default security group, perform the following:\n5. Select the default security group\n6. For each default security group, choose the Inbound rules tab and delete all inbound rules.\n7. For each default security group, choose the Outbound rules tab and delete all outbound rules.\n8. Create a set of least-privilege security groups for the resources. See here for more details.\nRecommended: IAM groups allow you to edit the 'name' field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to 'DO NOT USE. DO NOT ADD RULES'\n\n**From TF**\n```\nresource \"aws_vpc\" \"mainvpc\" {\ncidr_block = \"10.1.0.0/16\"\n}\nresource \"aws_default_security_group\" \"test\" {\nvpc_id = aws_vpc.mainvpc.id\n\ningress {\nprotocol  = -1\nself      = true\nfrom_port = 0\nto_port   = 0\n}\n\n# OR\n\negress {\nfrom_port   = 0\nto_port     = 0\nprotocol    = \"-1\"\n}\n}\n```\n\n**From Command Line**\nTo make sure the default security group of every VPC restricts all traffic, run:\n```\naws ec2 revoke-security-group-ingress --region REGION --group-name GROUP-NAME --protocol PROTOCOL --port PORT --cidr 0.0.0.0/0\n```\n```\naws ec2 revoke-security-group-egress --region REGION --group-name GROUP-NAME --protocol PROTOCOL --port PORT --cidr 0.0.0.0/0\n```\n\n**References**\n1. https://docs.aws.amazon.com/config/latest/developerguide/vpc-default-security-group-closed.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/revoke-security-group-ingress.html ",
      "complianceTag": "Network Security",
      "logicHash": "qhhhlqwUgKGHYRciOwXeHA",
      "ruleId": "D9.AWS.NET.04",
      "category": "Baseline"
    },
    {
      "name": "Ensure there is a Dead Letter Queue configured for each Amazon SQS queue",
      "description": "Amazon SQS supports dead-letter queues, which other queues (source queues) can target for messages that can't be processed (consumed) successfully. Dead-letter queues are useful for debugging your application or messaging system because they let you isolate problematic messages to determine why their processing doesn't succeed.",
      "severity": "Informational",
      "logic": "Sqs should have redrivePolicy.deadLetterTargetArn",
      "remediation": "\n**From Portal**\nPerform the following to set a dead-letter queue for existing queue:\n1. Sign in to the Amazon SQS console at https://console.aws.amazon.com/sqs/\n2. In the navigation pane, choose Queues.\n3. Choose a queue and choose Edit.\n3. Scroll to the redrive policy section and choose Enabled.\n4. Enable the Dead-letter queue, and set the number of maximum receives to 50.\n5. Choose the Amazon Resource Name (ARN) of an existing Dead Letter Queue that you want to associate with this source queue.\n6. choose Save.\n\n**From TF**\n```\nresource \"aws_sqs_queue\" \"terraform_queue\" {\n+ redrive_policy = jsonencode({                     # to configure DLQ\ndeadLetterTargetArn = aws_sqs_queue.terraform_queue_deadletter.arn\nmaxReceiveCount     = 4\n})\n}\n```\n\n**From CLI**\nNOTE : Where the file should contain RedrivePolicy with deadLetterTargetArn different then the source queue.\naws sqs set-queue-attributes --queue-url QUEUE-URL --attributes <file:update_attributes.json>\n\n**References**\n1. https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-dead-letter-queue.html\n2. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sqs/set-queue-attributes.html\n3. https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html",
      "complianceTag": "Operational",
      "logicHash": "a0LhfuZpLSySLMyjINX0Ug",
      "ruleId": "D9.AWS.OPE.12",
      "category": "Baseline"
    },
    {
      "name": "Expired Route 53 Domain Names",
      "description": "Identify any expired domain names registered with AWS Route 53",
      "severity": "Informational",
      "logic": "Route53Domain should not have expirationTime before(-1, 'minutes')",
      "remediation": "\n**From Portal**\nUse following steps to verify expired domains.\n1. Navigate to Route 53 dashboard at https://console.aws.amazon.com/route53/.\n2. In the left navigation panel, under Domains, click Registered Domains.\n3. Select the relevant domain.\n4. On Your Domains 'domain name' page, in domain name configuration section, check the domain expiration date.\n5. If the selected domain name is already expired, continue with the restoration process setup.\n\n**From Command Line**\n1. Run below command to list all the domain names registered with AWS or transferred to AWS:\n```\naws route53domains list-domains --query 'Domains[*].DomainName'\n```\n\n2. Run below command to check the expiration date for the selected domain:\n```\naws route53domains get-domain-detail --domain-name EXAMPLE.DOMAIN.COM --query 'ExpirationDate'\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-restore-expired.html\n2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html\n3. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-extend.html\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/route53domains/list-domains.html ",
      "complianceTag": "DNS Management",
      "logicHash": "SNomCgKepzi+esTby4yiFQ",
      "ruleId": "D9.AWS.DNS.01",
      "category": "Baseline"
    },
    {
      "name": "Lambda Functions must have an associated tag",
      "description": "Tags are key-value pairs that you attach to AWS resources to better organize them. They are particularly useful when you have many resources of the same type, which in the case of AWS Lambda, is a function. By using tags, customers with hundreds of Lambda functions can easily access and analyze a specific set by filtering on those that contain the same tag. Two of the key advantages of tagging your Lambda functions are: Grouping and Filtering and Cost allocation.",
      "severity": "Informational",
      "logic": "Lambda should have tags",
      "remediation": "\n**From Portal**\n1. Navigate to: https://console.aws.amazon.com/lambda/home#/functions.\n2. Choose the name of a function.\n3. Choose Configuration, and then choose Tags.\n4. Under Tags, choose Manage tags.\n5. Choose Add new tag, and then enter a Key and an optional Value. To add more tags, repeat this step.\n6. Choose Save.\n\n**From TF**\n```\nresource \"aws_lambda_function\" \"test\" {\nruntime = \"nodejs12.x\"\n\n+ tags = {\n+   Name = \"TAG_NAME\"\n+ }\n}\n```\n\n**From CLI**\nTo add tags to an existing function, use the tag-resource command.\n```\naws lambda tag-resource --resource arn:aws:lambda:us-east-2:123456789012:function:my-function --tags Department=Marketing,CostCenter=1234ABCD\n```\nTo remove tags, use the untag-resource command.\n```\naws lambda untag-resource --resource arn:aws:lambda:us-east-1:123456789012:function:my-function --tag-keys Department\n```\n**References**\n1. https://docs.aws.amazon.com/lambda/latest/dg/configuration-tags.html ",
      "complianceTag": "Cloud Assets Management",
      "logicHash": "EB4wPcgC2OLJglxS1wsAHg",
      "ruleId": "D9.AWS.AS.03",
      "category": "Baseline"
    },
    {
      "name": "Use Route53 for scalable, secure DNS service in AWS.",
      "description": "Use AWS Route 53 Domain Name System (DNS) service within your AWS account to manage DNS zones for your domains",
      "severity": "Informational",
      "logic": "Route53HostedZone should have recordSets",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console and open the Route 53 console at https://console.aws.amazon.com/route53/.\n2. Choose Create hosted zone.\n3. Login to the AWS Management Console.\n4. In the Create Hosted Zone pane, enter the name of the domain that you want to route traffic for. You can also optionally enter a comment.\n5. Under Type, select the value 'Public hosted zone' or 'Private hosted zone'.\n6. Choose Create.\n\n**From TF**\n```\nresource \"aws_route53_zone\" \"primary\" {\nname = \"example.com\"\n}\n```\n\n**From Command Line**\nRun following command to create a new AWS Route 53 Hosted zone.\n```\naws route53 create-hosted-zone --name example.com --caller-reference VALUE --hosted-zone-config Comment=command-line version\n```\nNote: --caller-reference: Use a unique string that identifies the request and that allows failed CreateHostedZone requests to be retried without the risk of executing the operation twice. You must use a unique CallerReference string every time you submit a CreateHostedZone request. CallerReference can be any unique string, for example, a date/time stamp.\n\nNote: --hosted-zone-config: Use a complex type that contains the optional values as:\nFor public and private hosted zones, an optional comment.\nFor private hosted zones, an optional PrivateZone element\n\nRun following command to add the new private DNS record to the selected Private Hosted zone. You need to create an Amazon Route 53 change file before adding the DNS record to a Hosted zone.\n```\naws route53 change-resource-record-sets --hosted-zone-id ZONE_ID --change-batch file://record.json\n```\n\n**References**\n1. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zone-private-creating.html\n2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_zone\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/route53/create-hosted-zone.html ",
      "complianceTag": "Network Security",
      "logicHash": "lTOu+biDavs9Oz8Ppe2Clw",
      "ruleId": "D9.AWS.NET.24",
      "category": "Baseline"
    },
    {
      "name": "Eliminate use of the 'root' user for administrative and daily tasks",
      "description": "It is strongly recommended not to use the 'root' account. The root account is the most privileged AWS account; it has unrestricted access to all resources in the AWS account. Minimizing the use of this account and adopt the principle of least privilege to reduce the risk of accidental changes and unintended disclosure of highly privileged credentials.\nNote: Government cloud accounts do not have a root user, and so, should exclude this rule in the CloudGuard UI -> Posture Management -> Exclusions -> Create New Exclusion (for each relevant ruleset)",
      "severity": "High",
      "logic": "IamUser where name regexMatch /^<root_account>$/i should not have passwordLastUsed after(-90, 'days')",
      "remediation": "\nWe recommend that Root accounts should not be used and that the credentials not be shared with anyone else. As a best practice, customers should leverage IAM Groups, Roles and Users to grant access to specific AWS resources.\n\n**References**\n1. Follow IAM Best Practices at the following link: http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html ",
      "complianceTag": "Identity and Access Management",
      "logicHash": "jnZ2Ag5/fhI/qfHv3n9Fsg",
      "ruleId": "D9.AWS.IAM.01",
      "category": ""
    },
    {
      "name": "Enforce Password Policy",
      "description": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets, have minimal length, rotation and history restrictions.",
      "severity": "High",
      "logic": "Iam should have passwordPolicy.enabledInAccount=true",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS console\n2. In the console, select the specific region\n3. Navigate to the 'Identity and Access Management (IAM)' service.\n4. In the left pane click on 'Account settings'.\n5. Click on change password policy and select your account password policy requirements.\n6. Select the options that you want to apply to your password policy and choose Save changes.\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"Example\" {\nminimum_password_length        = \"value\"\nmax_password_age               = \"value\"\npassword_reuse_prevention\t = \"value\"\nhard_expiry\t\t\t = \"true/false\"\nrequire_lowercase_characters   = \"true/false\"\nrequire_numbers                = \"true/false\"\nrequire_uppercase_characters   = \"true/false\"\nrequire_symbols                = \"true/false\"\nallow_users_to_change_password = \"true/false\"\n}\n```\n**From Command Line**\nIn order to enforce password policy, use to following CLI command:\n```\naws iam update-account-password-policy [--minimum-password-length PUT_VALUE ] [--require-symbols | --no-require-symbols] [--require-numbers | --no-require-numbers] [--require-uppercase-characters | --no-require-uppercase-characters] [--require-lowercase-characters | --no-require-lowercase-characters] [--allow-users-to-change-password | --no-allow-users-to-change-password] [--max-password-age PUT_VALUE] [--password-reuse-prevention PUT_VALUE] [--hard-expiry | --no-hard-expiry]\n```\n\n**References**\n1. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n2. https://registry.terraform.io/modules/rhythmictech/password-policy/iam/latest\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy\n4. https://docs.aws.amazon.com/cli/latest/reference/iam/update-account-password-policy.html",
      "complianceTag": "Identity and Access Management",
      "logicHash": "3XFmc9AywfC7tUiBYvNJkQ",
      "ruleId": "D9.AWS.IAM.112",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy prevents password reuse",
      "description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\nPreventing password reuse increases account resiliency against brute force login attempts.",
      "severity": "High",
      "logic": "Iam should have passwordPolicy.passwordReusePrevention>=4",
      "remediation": "\n**From Portal:**\n1. Go to AWS Management Console: https://console.aws.amazon.com/iam/\n2. Navigate to IAM Services.\n3. Under Access management go to Account settings.\n4. Select 'Change password policy'.\n5. Select 'Prevent password reuse'.\n6. Set '4' in the Remember passwords.\n7. Click save changes.\n\n**From TF:**\nSet the 'password_reuse_prevention' to be equal to 4:\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\n...\npassword_reuse_prevention       = 4\n...\n}\n```\n\n**From Command Line:**\nrun:\n```\naws iam update-account-password-policy --password-reuse-prevention 4\n```\n\nReferences:\n1. https://workbench.cisecurity.org/benchmarks/679\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/update-account-password-policy.html\n",
      "complianceTag": "1.9|Identity and Access Management",
      "logicHash": "EOeAowlX4HaNybFByqyUig",
      "ruleId": "D9.AWS.IAM.14",
      "category": "Baseline"
    },
    {
      "name": "Ensure access keys are rotated every 90 days or less (First access key)",
      "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated. Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
      "severity": "High",
      "logic": "IamUser where firstAccessKey.isActive='true' should not have firstAccessKey.lastRotated before(-90, 'days')",
      "remediation": "\n**From Portal**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Click 'Create access key' and save the new credentials.\n9. Update all applications and tools to use the new access key.\n10. After you verified the new Access key is updated, go to the inactive Access key and click on Delete.\n\n**From Command Line**\n1. To create new access key, run:\n```\naws iam create-access-key --user-name USER_NAME\n```\n2. To inactive the old access key, run following command:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n3. To delete the old access key, run:\n```\naws iam delete-access-key --access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\n**References**\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html ",
      "complianceTag": "1.14 | Identity and Access Management",
      "logicHash": "2mtdy7TLhfgoYHKhfovZow",
      "ruleId": "D9.AWS.IAM.06",
      "category": "Baseline"
    },
    {
      "name": "Ensure access keys are rotated every 90 days or less (Second access key)",
      "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
      "severity": "High",
      "logic": "IamUser where secondAccessKey.isActive='true' should not have secondAccessKey.lastRotated before(-90, 'days')",
      "remediation": "\n**From Portal**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Click 'Create access key' and save the new credentials.\n9. Update all applications and tools to use the new access key.\n10. After you verified the new Access key is updated, go to the inactive Access key and click on Delete.\n\n**From Command Line**\n1. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete the old access key, run:\n```\naws iam delete-access-key --access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\n**References**\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html ",
      "complianceTag": "1.14 | Identity and Access Management",
      "logicHash": "F5tTPbvdkrZiOxyqiD17hw",
      "ruleId": "D9.AWS.IAM.07",
      "category": "Baseline"
    },
    {
      "name": "Ensure all S3 buckets employ encryption-at-rest",
      "description": "Amazon S3 provides a variety of no, or low, cost encryption options to protect data at rest.",
      "severity": "High",
      "logic": "S3Bucket should have encryption.serverSideEncryptionRules contain [ serverSideEncryptionByDefault.serverSideEncryptionAlgorithm='aws:kms' or 'AES256']",
      "remediation": "1. Login to AWS Management Console and open the Amazon S3 console using \nhttps://console.aws.amazon.com/s3/\n2. Select the Check box next to the Bucket.\n3. Click on 'Properties'.\n4. Click on Default Encryption.\n5. Select either AES-256 or AWS-KMS\n6. Click Save\n7. Repeat for all the buckets in your AWS account lacking encryption",
      "complianceTag": "Encryption and Key Management",
      "logicHash": "RaBuO/FJzP71rAfCNvw8TQ",
      "ruleId": "D9.AWS.CRY.03",
      "category": ""
    },
    {
      "name": "Ensure no 'root' user account access key exists",
      "description": "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed. Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged.\nNote: Government cloud accounts do not have a root user, and so, should exclude this rule in the CloudGuard UI -> Posture Management -> Exclusions -> Create New Exclusion (for each relevant ruleset)",
      "severity": "High",
      "logic": "IamUser where name regexMatch /^<root_account>$/ should have firstAccessKey.isActive=false and secondAccessKey.isActive=false",
      "remediation": "\n**From Portal**\nPerform the following to delete or disable active root access keys being Via the AWS Console:\n1. Sign in to the AWS Management Console as Root and open the IAM console at https://console.aws.amazon.com/iam/.\n2. Click on <Root_Account_Name> at the top right and select Security Credentials from the drop down list\n3. On the pop out screen Click on Continue to Security Credentials\n4. Click on Access Keys (Access Key ID and Secret Access Key)\n5. Under the Status column if there are any Keys which are Active\n5.1. Click on Make Inactive - (Temporarily disable Key - may be needed again)\n5.2. Click Delete - (Deleted keys cannot be recovered)\n\n**From TF**\n```\nresource \"aws_iam_access_key\" \"positive1\" {\n+ user    = \"root\"\n- id = \"some_id_that_exists\"\n+ status = \"Inactive\"\n}\n```\n\n**From Command Line**\nTo delete active root access keys, run:\n```\naws iam delete-access-key --access-key-id ACCESS_KEY_ID --user-name USERNAME\n```\n**References**\n1. https://docs.aws.amazon.com/config/latest/developerguide/operational-best-practices-for-cis_aws_benchmark_level_1.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys\n4. https://docs.aws.amazon.com/cli/latest/reference/iam/delete-access-key.html",
      "complianceTag": "Identity and Access Management",
      "logicHash": "SUjlyn6ZyZb76aKyowybBw",
      "ruleId": "D9.AWS.IAM.16",
      "category": ""
    },
    {
      "name": "Ensure no EC2 instance allows incoming traffic from 0.0.0.0/0 to known TCP DB port",
      "description": "In order to implement the principle of least privilege and reduce the possibility of a breach. Always make sure EC2 instances are not exposed incoming traffic from 0.0.0.0/0 to known TCP DB ports",
      "severity": "High",
      "logic": "Instance where isPublic=true should not have nics contain [ securityGroups contain [ inboundRules contain [ scope='0.0.0.0/0' and port in($CloudGuard_Known_DB_TCP_Ports) and protocol in('TCP', 'ALL') ] ] ]",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console,  and Navigate to EC2 dashboard at https://console.aws.amazon.com/ec2/ .\n2. In the navigation pane, choose Instances.\n3. Select your instance and, in bottom half of the screen, choose the Security tab.\n4. Security groups lists the security groups that are associated with the instance. Inbound rules displays a list of the inbound rules that are in effect for the instance.\n5. Identify the security group with the scope 0.0.0.0/0 and a Known TCP port from the list in GSL.\n6. On the Edit inbound rules page, modify the traffic source that allow traffic from 0.0.0.0/0 to one of the port from the list.\n7. Select My IP from the Source dropdown list to allow inbound traffic only from your machine or  Select Custom from the Source dropdown list and enter appropriate range of IPs.\n8. Click Save to apply the changes.\n\n**From Command Line**\n1. Identify the security group associated with the instance.Remove the rule which has ingress is 0.0.0.0/0 to one of the from the GSL list.\n```\naws ec2 revoke-security-group-ingress --region REGION --group-name GROUP_NAME --protocol tcp --port PORT_NUMBER --cidr 0.0.0.0/0\n```\n2. Now add the inbound rules with different parameters, Modify the CIDR_BLOCK to appropriate range in order to restrict access from 0.0.0/0 to one of the port from the list.\n```\naws ec2 authorize-security-group-ingress --region REGION --group-name GROUP_NAME --protocol PROTOCOL --port PORT --cidr CIDR_BLOCK\n```\n**From CFT**\nUse the link to the Cloudformation resource from the references.\n\n**From TF**\nUse the link to the terraform resource from the references.\n\n**References**\n1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html\n2. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/revoke-security-group-ingress.html#\n3. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance\n5. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
      "complianceTag": "Network Ports Security",
      "logicHash": "zPhm7LCvt+FHRWQJutcH/A",
      "ruleId": "D9.AWS.NET.80",
      "category": ""
    },
    {
      "name": "Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
      "description": "CloudTrail logs a record of every API call made in your AWS account. These log files are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access",
      "severity": "High",
      "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should not have ( acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%'] or policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*')])",
      "remediation": "\n**From Portal**\nPerform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n\n1. Go to Amazon S3 console at https://console.aws.amazon.com/s3/home\n2. Right-click on the bucket and click Properties\n3. In the Properties pane, click the Permissions tab.\n4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n5. Select the row that grants permission to Everyone or Any Authenticated User\n6. Uncheck all the permissions granted to Everyone or Any Authenticated User (click x to delete the row).\n7. Click Save to save the ACL.\n8. If the Edit bucket policy button is present, click it.\n9. Verify condition in any Statement having an Effect set to Allow and a Principal set to '*' or {'AWS' : '*'}.\n\n**From TF**\nAdd a policy document with required permissions and appropriate condition as needed as follows:\n```\ndata \"aws_iam_policy_document\" \"example\" {\n...\nstatement {\neffect = \"Allow\"\n\nactions = [\nREQUIRED_ACTIONS\n]\nprincipals {\nREQUIRED_PRINCIPALS\n}\n\nresources = [\n\"S3_BUCKET_ARN\",\n]\n\ncondition {\ntest     = TEST\nvariable = CONTEXT_VARIABLE\n\nvalues = [\nVALUES\n]\n}\n}\n...\n}\n```\n\n**From Command Line**\nTo add a policy with required permissions and appropriate condition as needed, run:\n```\naws s3api put-bucket-policy --bucket BUCKET-NAME --policy file://policy.json\n```\n\n**References**\n1. https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html\n2. https://registry.terraform.io/providers/hashicorp/aws/3.3.0/docs/data-sources/iam_policy_document\n3. https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html\n4. https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html",
      "complianceTag": "Logging",
      "logicHash": "8IpYC8DknNj/TIvs6Ta4cQ",
      "ruleId": "D9.AWS.LOG.23",
      "category": "Baseline"
    },
    {
      "name": "Ensure there is only one active access key available for any single IAM user",
      "description": "Each IAM user can have up to two access keys. Having two access keys (instead of one), increases the risk of unauthorized access and compromise of credentials.  It is also recommended to delete unused access keys.",
      "severity": "High",
      "logic": "IamUser should not have firstAccessKey.isActive=true and secondAccessKey.isActive=true",
      "remediation": "\n**From Portal**\nPerform the following to delete or disable active root access keys being Via the AWS Console :\n1. Sign in to the AWS Management Console as Root and open the IAM console at https://console.aws.amazon.com/iam/.\n2. Click Users in the navigation pane\n3. For the identified IAM user which has two active Access Keys, based on policies of your company, take appropriate action\n4. Delete one of the unused Access Keys\n\n**From TF**\n```\nresource \"aws_iam_access_key\" \"positive1\" {\n+ user    = \"root\"\n- id = \"some_id_that_exists\"\n+ status = \"Inactive\"\n}\n```\n\n**From Command Line**\nTo disable one of the active access keys, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USERNAME\n```\n**References**\n1. https://docs.aws.amazon.com/config/latest/developerguide/operational-best-practices-for-cis_aws_benchmark_level_1.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys\n4. https://docs.aws.amazon.com/cli/latest/reference/iam/delete-access-key.html",
      "complianceTag": "Identity and Access Management",
      "logicHash": "oHt+/V6Iwesjwgzr9WVUeg",
      "ruleId": "D9.AWS.IAM.51",
      "category": ""
    },
    {
      "name": "AWS Cloud Front - WAF Integration",
      "description": "Ensure that all your AWS CloudFront web distributions are integrated with the Web Application Firewall (AWS WAF) service to protect against application-layer attacks",
      "severity": "Medium",
      "logic": "CloudFront where region unlike 'cn_%' should have distributionConfig.webACLId",
      "remediation": "\n**From Portal**\n1. Login to the AWS Management Console and open Cloudfront dashboard at https://console.aws.amazon.com/cloudfront/.\n2. On the Distributions page, select the relevant CDN.\n3. On the General tab click the Edit button.\n4. On the Distribution Settings page, verify the AWS WAF Web ACL configuration status. If AWS WAF Web ACL is set to None:, AWS WAF is not associated with an Access Control List (ACL).\n5. Edit the Settings in under General tab.\n6. Add a AWS WAF web ACL to the distribution.\n7. Click on Save changes.\n\n**From TF**\nwhile creating cloudfront add the web acl ID.\n```\nresource \"aws_cloudfront_distribution\" \"test\" {\n+ web_acl_id = \"ID\"\n}\n```\n\n**From Command Line**\nTo create WAF ACL and update the configuration to integrate with CloudFront, run:\n```\naws waf create-web-acl --name NAME --metric-name METRIC_NAME --default-action Type=BLOCK --change-token TOKEN\n\naws cloudfront update-distribution --id ID --distribution-config file://FILE.json\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-awswaf.html\n2. https://docs.aws.amazon.com/waf/latest/developerguide/classic-cloudfront-features.html\n3. https://docs.aws.amazon.com/cli/latest/reference/wafv2/create-web-acl.html\n4. https://docs.aws.amazon.com/waf/latest/developerguide/cloudfront-features.html\n5. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafregional_web_acl_association",
      "complianceTag": "Network Security",
      "logicHash": "/u5AL41piigqNrQjGyHQgg",
      "ruleId": "D9.AWS.NET.36",
      "category": "Baseline"
    },
    {
      "name": "Attached EBS volumes should be encrypted at-rest",
      "description": "For an added layer of security of your sensitive data in EBS volumes, you should enable EBS encryption at rest. Amazon EBS encryption offers a straightforward encryption solution for your EBS resources that doesn't require you to build, maintain, and secure your own key management infrastructure. It uses KMS keys when creating encrypted volumes and snapshots.",
      "severity": "Medium",
      "logic": "Volume where state='attached' should have encrypted=true",
      "remediation": "\n**From Portal**\nUse following steps to create a new, encrypted EBS volume:\n1. Navigate to EC2.\n2. Select the Region in which you would like to create your volume.\n3. In the navigation pane, select ELASTIC BLOCK STORE, Volumes.\n4. Select Create Volume.\n5. Select the desired values for Volume Type, Size, IOPS, Throughput, and Availability Zone.\n6. To encrypt the volume, select Encrypt this volume, and choose a CMK.\n7. Click Create Volume.\n\n**From TF**\nEnsure that an aws_ebs_volume resource has the encrypted field set to true\n```\nresource \"aws_ebs_volume\" \"example\" {\nencrypted = true\n# other required fields here\n}\n```\n\n**From Command Line**\n1. Get a list of an instance volumes to see which are encrypted and unencrypted. Note the volume id and mount device for each unencrypted volume.\n```\naws ec2 describe-volumes --filters Name=attachment.instance-id, Values=instance_id\n```\n2. Create a snapshot of an unencrypted EBS volume and track the snapshot id that is returned.\n```\naws ec2 create-snapshot --volume-id unencrypted_volume_id\n```\n3. Make an encrypted copy of the snapshot you just created and get the new snapshot id.\n```\naws ec2 copy-snapshot --region destination_region --source-region region_name --encrypted --source-snapshot-id snapshot_id\n```\n4. Create a new EBS volume from the encrypted snapshot and get the new volume id.\n```\naws ec2 create-volume --region region_name --availability-zone availability_zone --snapshot-id snapshot_id --volume-type gp2 --encrypted\n```\n5. Stop the instance with the unencrypted EBS volume\n```\naws ec2 stop-instance --instance-id instance_id\n```\n6. Detatch the non-encrypted EBS volume\n```\naws ec2 detach-volume --volume-id unencrypted_volume_id\n```\n7. Attach the new encrypted EBS volume to the EC2 instance:\n```\naws ec2 attach-volume --volume-id encrypted_volume_id --instance-id instance_id --device device_name\n```\n8. Restart the instance:\n```\naws ec2 start-instance --instance-id instance_id\n```\n\n**References**\n1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\n2. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html\n3. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/create-volume.html ",
      "complianceTag": "Encryption and Key Management",
      "logicHash": "3yMMo7dggCcUMgSnMXmFxQ",
      "ruleId": "D9.AWS.CRY.83",
      "category": ""
    },
    {
      "name": "Amazon GuardDuty service is enabled",
      "description": "Amazon GuardDuty is a threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. It monitors for activity such as unusual API calls or potentially unauthorized deployments that indicate a possible account compromise. GuardDuty also detects potentially compromised instances or reconnaissance by attackers.",
      "severity": "Low",
      "logic": "Region where (region='ap_southeast_1' or region='us_east_1') should have guardDutyStatus='Enabled'",
      "remediation": "\n**From Portal**\nUse following steps to enable Amazon GuardDuty\n1. Open the GuardDuty console at https://console.aws.amazon.com/guardduty/\n2. Choose Get Started.\n3. Choose Enable GuardDuty.\n\nNote: If you previously signed in to the AWS Management Console using AWS account root user credentials, choose Sign in to a different account. If you previously signed in to the console using IAM credentials, choose Sign-in using root account credentials. Then choose Create a new AWS account.\n\n**From TF**\n```\nresource \"aws_guardduty_detector\" \"test\" {\n+ enable = true\n}\n```\n\n**From Command Line**\nRun following command to create an Amazon GuardDuty detector.\n```\naws guardduty create-detector --region AWS_region_name --enable\n```\nNote: Detector is an object to represent the AWS GuardDuty service. A detector must be created to make GuardDuty operational. --enable command syntax specifies that the detector is automatically enabled after creation.\n\n**References**\n1. https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_settingup.html\n2. https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/guardduty_detector\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/guardduty/create-detector.html ",
      "complianceTag": "SC-5|AC-2|AU-3|AU-6|CA-7|CM-8|RA-3|RA-5|RA-10|IR-4|IR-5|CA-2|SC-43|SI-3|SI-4|SI-5|SA-15|SA-11",
      "logicHash": "2WCGLKBUCrKFidX2FvreNA",
      "ruleId": "D9.AWS.VLN.03",
      "category": ""
    },
    {
      "name": "Ensure AWS EBS Volumes are attached to instances",
      "description": "Checks for EBS volumes that are unattached to instances, for example, if they persist after an EC2 instance has been terminated. It is recommended to review of these volumes  regularly, since they may contain sensitive company data, application, infrastructure or users. In addition, removing unattached instances will lower your AWS bill.",
      "severity": "Low",
      "logic": "Volume should have attachments contain [ state='attached' ]",
      "remediation": "\n**From Portal**\nUse following steps to change the policy using the AWS Console:\n1. Log in to the AWS Management Console at https://console.aws.amazon.com/.\n2. Open the Amazon EC2 console.\n3. In the navigation pane, select Elastic Block Store and then Volumes.\n4. Select an available Volume and open Actions and then click on Attach Volume.\n5. Enter the name or ID of the Instance; the matching list of instances displays. Only instances in the same Availability Zone as the volume display. Select an Instance from the list.\nFor Device, either keep the suggested Device Name, or enter a different supported Device Name.\n6. Select Attach.\n\n**From TF**\n```\nresource \"aws_volume_attachment\" \"example1\" {\n...\n+ volume_id   = ebs_volume_id\n+ instance_id = aws_instance_id\n}\n```\n\n**From Command Line**\nUse following command to attach a volume to an instance:\n```\naws ec2 attach-volume --volume-id ebs_volume_id --instance-id aws_instance_id --device device_name\n```\nUse following command to delete the unused EBS volume:\n```\naws ec2 delete-volume --volume-id ebs_volume_id\n```\n\n**References**\n1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html\n2. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/volume_attachment\n5. https://docs.aws.amazon.com/cli/latest/reference/ec2/attach-volume.html\n5. https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html ",
      "complianceTag": "Operational",
      "logicHash": "3qK2bSouG2I8taKC3V1NHA",
      "ruleId": "D9.AWS.OPE.05",
      "category": "Baseline"
    },
    {
      "name": "Ensure AWS RDS instances have Multi-Availability Zone enabled",
      "description": "When an RDS DB instance is enabled with Multi-AZ, the RDS automatically creates a primary DB Instance and synchronously replicates the data to a standby instance in a different availability zone. These Multi-AZ deployments will improve primary node reachability by providing read replica in case of network connectivity loss or loss of availability in the primary availability zone for read/write operations.",
      "severity": "Low",
      "logic": "RDSDBCluster should have multiAZ=true",
      "remediation": "\n**From Portal**\n1. Sign into the AWS console.\n2. In the console, select the specific region.\n3. Navigate to the Amazon RDS console.\n4. Select Instances, and then select the reported DB instance.\n5. On 'Instance Actions' drop-down list, select 'Modify'\n6. In 'Instance Specifications' section for the 'Multi-AZ Deployment', select 'Yes'\n7. Click 'Continue'\n8. On the confirmation page, review the changes and click 'Modify DB Instance' to save your changes.\n\n**From TF**\n```\nresource \"aws_db_instance\" \"example\" {\n...\nname                 = \"example_db\"\n+ multi_az             = true\n}\n```\nNote: multi_az attribute true specifies that the RDS instance is multi-AZ.\n\n**From Command Line**\n```\naws rds modify-db-instance --db-instance-identifier RDS_instance_name --option-group-name db_instance_option_group --db-parameter-group-name DB_parameter_group --multi-az --apply-immediately\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZSingleStandby.html\n2. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html\n3. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/modify-db-cluster.html ",
      "complianceTag": "Backup and Disaster Recovery",
      "logicHash": "s8zt1A411uJXLAFexpi5lQ",
      "ruleId": "D9.AWS.DR.02",
      "category": "Baseline"
    },
    {
      "name": "Ensure Auto Minor Version Upgrade feature is Enabled for RDS Instances",
      "description": "RDSs can be upgraded with major and minor upgrades. Minor upgrades help maintain a secure and stable RDS with minimal impact on the application. It is recommended that automatic minor upgrades are enabled. ",
      "severity": "Low",
      "logic": "RDS should have autoMinorVersionUpgrade=true",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console and open the Amazon RDS console at https://console.aws.amazon.com/rds/.\n2. In the upper-right corner of the Amazon RDS console, choose the AWS Region in which you want to create the DB instance.\n3. In the navigation pane, choose Databases.\n4. Choose Create database.\n5. In Choose a database creation method, select Standard Create.\n6. Set the other options as per your requirement\n7. Under the Maintenance section, select Yes for Auto minor version upgrade.\n8. Choose Create database\n\n**From TF**\n```\nresource \"aws_db_instance\" \"test\" {\nallocated_storage    = 20\nstorage_type         = \"gp2\"\nengine               = \"mysql\"\nengine_version       = \"5.7\"\ninstance_class       = \"db.t2.micro\"\nname                 = \"mydb\"\nusername             = \"foo\"\npassword             = \"foobarbaz\"\niam_database_authentication_enabled = true\nstorage_encrypted = true\nca_cert_identifier = \"rds-ca-2019\"\n+ auto_minor_version_upgrade = true  #to enable auto Minor Version Upgrade feature\n}\n```\n\n**From Command Line**\nTo enable automatic minor upgrades, run:\n```\naws rds create-db-instance --engine ENGINE --db-instance-identifier DB_IDENTIFIER --allocated-storage SIZE  --db-instance-class DB_INSTANCE_CLASS --vpc-security-group-ids SECURITY_GROUP_ID --db-subnet-group SUBNET_GROUP --master-username USER --master-user-password PWD -backup-retention-period DAYS --auto-minor-version-upgrade\n\n```\n\n**References**\n1. https://docs.aws.amazon.com/config/latest/developerguide/rds-automatic-minor-version-upgrade-enabled.html\n2. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Upgrading.html\n3. https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html",
      "complianceTag": "Operational",
      "logicHash": "Iuk+6pQtWENThYdBRTGVOw",
      "ruleId": "D9.AWS.OPE.08",
      "category": ""
    },
    {
      "name": "Ensure CloudTrail log file validation is enabled",
      "description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
      "severity": "Low",
      "logic": "CloudTrail should have logFileValidationEnabled=true",
      "remediation": "\n**From Portal**\nPerform the following to enable log file validation on a given trail: Via the management Console\n1. Sign in to the AWS Management Console and open the CloudTrail console at https://console.aws.amazon.com/cloudtrail\n2. On the CloudTrail service home page, the Trails page, or the Trails section of the Dashboard page, choose Create trail.\n3. On the Create Trail page, for Trail name, type a name for your trail.\n4. For Storage location, choose Create new S3 bucket to create a bucket. When you create a bucket, CloudTrail creates and applies the required bucket policies.\n5. In Additional settings, click on the yes radio button in section 'Enable log file validation'.\n6. Click Save\n\n**From TF**\n```\nresource \"aws_cloudtrail\" \"negative1\" {\nname                          = \"negative1\"\ns3_bucket_name                = \"bucketlog1\"\n+ enable_log_file_validation    = true\n}\n```\n\n**From Command Line**\naws cloudtrail update-trail --name TRAIL-NAME --enable-log-file-validation\n\n\n**References**\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.amazonaws.cn/en_us/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudtrail\n4. https://docs.amazonaws.cn/en_us/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html",
      "complianceTag": "Logging",
      "logicHash": "Fei/D4WfIb8eD28c7ibnMw",
      "ruleId": "D9.AWS.LOG.02",
      "category": ""
    },
    {
      "name": "Ensure CloudTrail trails are integrated with CloudWatch Logs",
      "description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, real time analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
      "severity": "Low",
      "logic": "CloudTrail should have cloudWatchLogsRoleArn and status.latestCloudWatchLogsDeliveryTime after (-1, 'days')",
      "remediation": "\n**From Portal**\n1. Open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.\n2. Choose the trail name. If you choose a trail that applies to all regions, you will be redirected to the region in which the trail was created.\nYou can create a log group or choose an existing log group in the same region as the trail.\nNote: A trail that applies to all regions sends log files from all regions to the CloudWatch Logs log group that you specify.\n3. For CloudWatch Logs, choose Edit.\n4. For New or existing log group, type the log group name , and then choose Continue.\n5. For the IAM role, choose an existing role or create one. If you create an IAM role, type a role name.\n6. Choose Save changes.\n\n**From TF**\n```\nresource \"aws_cloudwatch_log_group\" \"example_log_group\" {\n...\n}\n\nresource \"aws_cloudtrail\" \"example_cloudtrail\" {\n...\ncloud_watch_logs_group_arn = \"${aws_cloudwatch_log_group.example_log_group.arn}:*\" # CloudTrail requires the Log Stream wildcard\n...\n}\n```\n\n**From Command Line**\nTo update the CloudTrail to add CloudWatch logs, run:\n```\naws cloudtrail update-trail --name TRAIL-NAME --cloud-watch-logs-log-group-arn LOG-GROUP-ARN --cloud-watch-logs-role-arn ROLE-ARN\n```\n\n**References**\n1. https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/update-trail.html\n2. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/send-cloudtrail-events-to-cloudwatch-logs.html#send-cloudtrail-events-to-cloudwatch-logs-console\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudtrail",
      "complianceTag": "Logging",
      "logicHash": "giiUrgycXiS1LCFyShyGRQ",
      "ruleId": "D9.AWS.LOG.03",
      "category": ""
    },
    {
      "name": "Ensure IAM Users Receive Permissions Only Through Groups",
      "description": "It is recommended that IAM policies be applied directly to groups and roles but not to users. IAM policies are the means by which privileges are granted to users, groups, or roles. By default, IAM users, groups, and roles have no access to AWS resources.\nAssigning privileges at the group or role level reduces the complexity of access management as the number of users grow. Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.",
      "severity": "Low",
      "logic": "IamUser where not (name regexMatch /^<root_account>$/i ) should have managedPolicies isEmpty() and inlinePolicies isEmpty()",
      "remediation": "\n**From Portal**\nTo remove a direct association between a user and policy:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the left navigation pane, click on Users\n3. For each user:\na. Select the user\nb. Click on the Permissions tab\nc. Expand Managed Policies\nd. Click Detach Policy for each policy\ne. Expand Inline Policies\nf. Click Remove Policy for each policy\n\nTo create an IAM group and assign a policy to it:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. In the navigation pane, click Groups and then click Create New Group .\n3. In the Group Name box, type the name of the group and then click Next Step .\n4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click Next Step.\n5. Click Create Group\n\nTo add a user to a given group:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click Groups\n3. Select the group to add a user to\n4. Click Add Users To Group\n5. Select the users to be added to the group\n6. Click Add Users\n\n**From TF**\nTo add user to a group, add following:\n```\nresource \"aws_iam_group_membership\" \"add_user_to_group_example\" {\n...\nusers = [\nUSER-1-NAME,\nUSER-2-NAME,\n]\ngroup = GROUP-NAME\n...\n}\n```\n\n**From Command Line**\nTo remove the specified managed policy from a specified user, run:\n```\naws iam detach-user-policy --user-name USER-NAME --policy-arn POLICY-ARN\n```\n\nTo attach a policy to IAM group, run:\n```\naws iam attach-group-policy --group-name GROUP-NAME --policy-arn POLICY-ARN\n```\n\nTo add a user to a group, run:\n```\naws iam add-user-to-group --group-name GROUP-NAME --user-name USER-NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_add-remove-users.html\n3. https://docs.aws.amazon.com/cli/latest/reference/iam/add-user-to-group.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user_group_membership",
      "complianceTag": "Identity and Access Management",
      "logicHash": "1Ufb5whTdTYU6VLIqa5Iqw",
      "ruleId": "D9.AWS.IAM.20",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy expires passwords within 90 days or less",
      "description": "IAM password policies can require passwords to be rotated or expired after a given number of days. It is recommended that the password policy expire passwords after 90 days or less.\nReducing the password lifetime increases account resiliency against brute force login attempts. Additionally, requiring regular password changes help in the following scenarios:\n- Passwords can be stolen or compromised sometimes without your knowledge. This can happen via a system compromise, software vulnerability, or internal threat.\n- Certain corporate and government web filters or proxy servers have the ability to intercept and record traffic even if it's encrypted.\n- Many people use the same password for many systems such as work, email, and personal.\n- Compromised end user workstations might have a keystroke logger.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.maxPasswordAge>0 and passwordPolicy.maxPasswordAge<91",
      "remediation": "\n**From Portal**\nPerform the following steps to set the password policy via AWS Console.\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n2. Go to IAM Service on the AWS Console\n3. Click on Account Settings on the Left Pane\n4. Check 'Enable password expiration'\n5. Set 'Password expiration period (in days):' to 90 or less\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\nmax_password_age               = TYPE_VALUE <= 90\n```\n\n**From Command Line**\n```\naws iam update-account-password-policy --max-password-age 90\n```\n\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html",
      "complianceTag": "Identity and Access Management",
      "logicHash": "289ILzPvl70+wpUKMNs+Kg",
      "ruleId": "D9.AWS.IAM.15",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy require at least one lowercase letter",
      "description": "It is recommended that the password policy require at least one lowercase letter. Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure passwords consist of different character sets. Setting a password complexity policy increases account resiliency against brute force login attempts.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.requireLowercaseCharacter=true",
      "remediation": "\n**From Portal**\nPerform the following to set the password policy as prescribed:\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n2. Go to IAM Service on the AWS Console\n3. Click on Account Settings on the Left Pane\n4. Check 'Requires at least one lowercase letter'\n5. Click 'Apply password policy'\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"test\" {\nminimum_password_length        = 8\n+ require_lowercase_characters   = true\nrequire_numbers                = true\nrequire_uppercase_characters   = true\nrequire_symbols                = true\nallow_users_to_change_password = true\n}\n```\n\n**From Command Line**\nTo add a password policy with required condition, run:\n```\naws iam update-account-password-policy --require-lowercase-characters\n```\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/config/latest/developerguide/iam-password-policy.html\n4. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/get-account-password-policy.html\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy",
      "complianceTag": "Identity and Access Management",
      "logicHash": "zQg4pD5gh2V74UjM5D2C/g",
      "ruleId": "D9.AWS.IAM.09",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy require at least one symbol",
      "description": "It is recommended that the password policy require at least one symbol. Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure passwords consist of different character sets. Setting a password complexity policy increases account resiliency against brute force login attempts.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.requireSymbols=true",
      "remediation": "\n**From Portal**\nPerform the following to set the password policy as prescribed:\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n2. Go to IAM Service on the AWS Console\n3. Click on Account Settings on the Left Pane\n4. Check 'Require at least one non-alphanumeric character'\n5. Click 'Apply password policy'\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"test\" {\nminimum_password_length        = 8\nrequire_lowercase_characters   = true\nrequire_numbers                = true\nrequire_uppercase_characters   = true\n+ require_symbols                = true\nallow_users_to_change_password = true\n}\n```\n\n**From Command Line**\nTo add a password policy with required condition, run:\n```\naws iam update-account-password-policy --require-symbols\n```\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/config/latest/developerguide/iam-password-policy.html\n4. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/get-account-password-policy.html\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy",
      "complianceTag": "Identity and Access Management",
      "logicHash": "AkhnR5uI4aUAwLf/Nj3TfQ",
      "ruleId": "D9.AWS.IAM.10",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy requires at least one uppercase letter",
      "description": "It is recommended that the password policy require at least one uppercase letter. Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure passwords consist of different character sets. Setting a password complexity policy increases account resiliency against brute force login attempts.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.requireUppercaseCharacter=true",
      "remediation": "\n**From Portal**\nPerform the following to set the password policy as prescribed:\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n2. Go to IAM Service on the AWS Console\n3. Click on Account Settings on the Left Pane\n4. Check 'Requires at least one uppercase letter'\n5. Click 'Apply password policy'\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"test\" {\nminimum_password_length        = 8\nrequire_lowercase_characters   = true\nrequire_numbers                = true\n+ require_uppercase_characters   = true\nrequire_symbols                = true\nallow_users_to_change_password = true\n}\n```\n**From Command Line**\nTo add a password policy with required condition, run:\n```\naws iam update-account-password-policy --require-uppercase-characters\n```\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/config/latest/developerguide/iam-password-policy.html\n4. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/get-account-password-policy.html\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy",
      "complianceTag": "Identity and Access Management",
      "logicHash": "deMWBl0D9k4hnT43t7rM9A",
      "ruleId": "D9.AWS.IAM.08",
      "category": "Baseline"
    },
    {
      "name": "Ensure IAM password policy requires minimum length of 8 or greater",
      "description": "Set the IAM password policy to ensure passwords consist of at least 8 characters. Password policies are, in part, used to enforce password complexity requirements. Setting a password complexity policy increases account resiliency against brute force login attempts.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.minPasswordLength>=8",
      "remediation": "\n**From Portal:**\n1. Go to AWS Management Console: https://console.aws.amazon.com/iam/\n2. Navigate to IAM Services.\n3. Under Access management go to Account settings.\n4. Select 'Change password policy'.\n5. Set the Enforce minimum password length to be '8' characters.\n6. Click save changes.\n\n**From TF:**\nSet the 'minimum_password_length' to be equal to 8:\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\n...\nminimum_password_length        = 8\n...\n}\n```\n\n**From Command Line:**\nrun:\n```\naws iam update-account-password-policy --minimum-password-length 8\n```\n\nReferences:\n1. https://workbench.cisecurity.org/benchmarks/679\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/update-account-password-policy.html\n",
      "complianceTag": "1.8 | Identity and Access Management",
      "logicHash": "ApbJG7LIbHs1ojCJUxXU4A",
      "ruleId": "D9.AWS.IAM.12",
      "category": "Baseline"
    },
    {
      "name": "Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
      "description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket. By enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within an target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.",
      "severity": "Low",
      "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should have logging.enabled='true'",
      "remediation": "\n**From Portal**\n1. Sign in to the AWS Management Console and Navigate to Amazon S3 console.\n2. Click on the name of the associated S3 bucket that you want to update.\n3. Select the Properties tab from the console menu to access the bucket properties.\n4. In the Server access logging section, choose Edit to modify the feature configuration.\n5. On the Edit server access logging page, perform the following actions:\na. Choose Enable under Server access logging to enable the Server Access Logging feature for the selected Amazon S3 bucket.\nb. For Target bucket, choose Browse S3 and select the name of the destination bucket and folder for the access logs. You should not use the same bucket for log storage. When your source bucket and destination (target) bucket are the same, additional logs are created for the logs that are written to the bucket. These extra logs can increase your storage billing and make it harder to find the logs that you are looking for.\nc. Choose Save changes to apply the configuration changes. Once the feature is enabled, Amazon S3 console will automatically update your bucket access control list (ACL) to include access to the S3 log delivery group.\n\n**From TF**\n```\nresource \"aws_s3_bucket\" \"cloudtrail_bucket\" {\nbucket = \"BUCKET_NAME\"\nlogging {\ntarget_bucket = \"${TARGET_BUCKET_NAME}\"\ntarget_prefix = \"KEY_PREFIX\"\n}\nother required fields here\n}\n```\nNote: Terraform logging configuration block supports the following arguments:\ntarget_bucket - (Required) The name of the bucket that will receive the log objects.\ntarget_prefix - (Optional) To specify a key prefix for log objects.\n\n**From Command Line**\nUse following command to enable Bucket Logging:\n```\naws s3api put-bucket-logging --bucket BUCKET_NAME --bucket-logging-status file://logging.json\n```\nNote: Logging.json is a JSON document in the current folder that contains the logging configuration. For more information follow the reference section.\n\n**References**\n1. https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/get-bucket-acl.html\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudtrail/index.html ",
      "complianceTag": "Logging",
      "logicHash": "CIiGKr8zSDlruWpKA4jkwg",
      "ruleId": "D9.AWS.LOG.05",
      "category": "Baseline"
    },
    {
      "name": "Ensure VPC Flow Logging is Enabled in all Applicable Regions (Singapore and North Virginia)",
      "description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled. VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.",
      "severity": "Low",
      "logic": "Region where(region='ap_southeast_1' or region='us_east_1') and (not vpcs isEmpty()) should have hasVpcFLowLogging='true'",
      "remediation": "\n**From Portal**\n1. Log in to the AWS Management Console at [https://console.aws.amazon.com/]\n2. Select Services and open VPC dashboard.\n3. In the left navigation pane, select Your VPCs.\n4. Select a VPC and open Flow Logs tab In the right pane.\n5. If no Flow Log exists, click Create Flow Log.\n6. Set Filter to Reject.\n7. Enter a Role and Destination Log Group.\n8. Click Create Log Flow.\n9. Click CloudWatch Logs Group.\n10. Perform the above steps for all applicable regions.\n\n**From TF**\n```\nresource \"aws_flow_log\" \"example\" {\niam_role_arn    = \"arn\"\nlog_destination = \"log\"\ntraffic_type    = \"ALL\"\n+ vpc_id          = vpc.id\n}\n\nresource \"aws_vpc\" \"example_vpc\" {\ncidr_block = \"IP_block\"\n}\n```\n\n**References**\n1. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\n2. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n3. https://registry.terraform.io/providers/hashicorp/aws/3.1.0/docs/resources/flow_log ",
      "complianceTag": "Logging",
      "logicHash": "qCF4FWkfLj6SFfR2I3rXeA",
      "ruleId": "D9.AWS.LOG.14",
      "category": "Baseline"
    },
    {
      "name": "Ensure VPC flow logging is enabled in all VPCs (Singapore and North Virginia)",
      "description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.",
      "severity": "Low",
      "logic": "VPC where (region='ap_southeast_1' or region='us_east_1') should have hasFlowLogs=true",
      "remediation": "\n**From Portal**\nPerform the following to determine if VPC Flow logs is enabled.\n1. Log in to the AWS Management Console at https://console.aws.amazon.com/.\n2. Select Services and open VPC dashboard.\n3. In the left navigation pane, select Your VPCs.\n4. Select a VPC and open Flow Logs tab In the right pane.\n5. If no Flow Log exists, click Create Flow Log.\n6. Set Filter to Reject.\n7. Enter a Role and Destination Log Group.\n8. Click Create Log Flow.\n9. Click CloudWatch Logs Group.\n\n**From TF**\n```\nresource \"aws_vpc\" \"main\" {\ncidr_block = \"10.0.0.0/16\"\n}\n\n+ resource \"aws_flow_log\" \"example\" {\n+    iam_role_arn    = aws_iam_role.example.arn\n+    log_destination = aws_cloudwatch_log_group.example.arn\n+    traffic_type    = \"ALL\"\n+    vpc_id          = aws_vpc.example.id # *** can't be same VPC ***\n+  }\n\n+ resource \"aws_flow_log\" \"example2\" {\n+   iam_role_arn    = aws_iam_role.example.arn\n+   log_destination = aws_cloudwatch_log_group.example.arn\n+   traffic_type    = \"ALL\"\n+   vpc_id          = aws_vpc.example.id\n+ }\n```\n\n**References**\n1. https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\n2. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n3. https://registry.terraform.io/providers/hashicorp/aws/3.1.0/docs/resources/flow_log\n4. https://workbench.cisecurity.org/benchmarks/679 ",
      "complianceTag": "Logging",
      "logicHash": "NbXAGSaTlOAuFyFCYJtJwg",
      "ruleId": "D9.AWS.LOG.22",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for AWS Config configuration changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.Monitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name aws_config_changes_metric --metric-transformations metricName= aws_config_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name aws_config_changes_alarm --metric-name aws_config_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace METRIC_NAMESPACE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387897\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "/wXbj7Q2epO3UtkXgTWyuA",
      "ruleId": "D9.AWS.MON.09",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts. Monitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP, that can be used in other event correlation.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = ConsoleLogin) && ($.errorMessage = Failed authentication) }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name  `console_signin_failure_metric`  --metric-transformations metricName= `console_signin_failure_metric` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.errorMessage = Failed authentication) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name  `console_signin_failure_alarm`  --metric-name  `console_signin_failure_metric`  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387892\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "avrjhWut3T0ClguNn8uRlA",
      "ruleId": "D9.AWS.MON.06",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations. Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) ||($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =StopLogging) }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name `cloudtrail_cfg_changes_metric`  --metric-transformations metricName= `cloudtrail_cfg_changes_metric` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name `cloudtrail_cfg_changes_alarm` --metric-name  `cloudtrail_cfg_changes_metric` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387890\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "qtrirEtxV9UZW6m2ppE6BQ",
      "ruleId": "D9.AWS.MON.05",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for IAM policy changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.\nMonitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}')] length() > 0]",
      "remediation": "\nNote: This remediation process assumes SNS topic and log group are already configured.\n\n**From Portal**\n1. Go to 'CloudWatch'\n2. In the menu, under 'Logs', choose 'Log groups' and choose the relevant log group\n3. Press 'Create new metric filter' and add the following 'Filter pattern': '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}'\n4. Review and create the new metric filter\n5. In the menu, under 'Alarms', choose 'All alarms' and choose the relevant log group\n6. Press 'Create alarm' and choose the relevant metric and press 'Next'\n7. Under 'Metric', make sure 'Statistic' is set to 'Sum'\n8. Under 'Conditions', make sure the threshold type is set to 'Static', an alarm condition is set to 'Greater/Equal' and the threshold value is set to '1'\n9. Configure your SNS topic under 'Notification'\n10. Create the alarm\n\n**From TF**\nCreate a new CloudWatch metric filter:\n```\nresource \"aws_cloudwatch_log_metric_filter\" \"metric_filter_example\" {\n..\nname             = \"FILTER-NAME\"\npattern          = \"{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}\"\nlog_group_name   = \"LOG-GROUP-NAME\"\n\nmetric_transformation {\nname      = \"METRIC-NAME\"\nnamespace = \"NAMESPACE-NAME\"\nvalue     = \"1\"\n..\n}\n}\n```\nCreate a new CloudWatch metric alarm:\n```\nresource \"aws_cloudwatch_metric_alarm\" \"metric_alarm_example\" {\n..\nalarm_name            = \"ALARM-NAME\"\ncomparison_operator   = \"GreaterThanOrEqualToThreshold\"\nevaluation_periods    = \"1\"\nmetric_name           = \"METRIC-NAME\"\nnamespace             = \"NAMESPACE-NAME\"\nperiod                = \"PERIOD\"\nstatistic             = \"Sum\"\nthreshold             = \"1\"\nalarm_actions         = [\"SNS-TOPIC-ARN\"]\n..\n}\n```\n\n**From Command Line**\nCreate a new CloudWatch metric filter:\n```\naws logs put-metric-filter --region REGION --log-group-name LOG-GROUP-NAME --filter-name FILTER-NAME --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}' --metric-transformations metricName=METRIC-NAME,metricNamespace=METRIC-NAMESPACE,metricValue=1\n```\nCreate a new CloudWatch metric alarm:\n```\naws cloudwatch put-metric-alarm --region REGION --alarm-name ALARM-NAME --metric-name METRIC-NAME --statistic Sum --period PERIOD --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE --alarm-actions SNS-TOPIC-ARN\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CreateMetricFilterProcedure.html\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/logs/put-metric-filter.html\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-metric-alarm.html\n5. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_metric_filter\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_metric_alarm\n7. https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html\n8. CIS AWS Foundations Benchmark: https://workbench.cisecurity.org/benchmarks/679 ",
      "complianceTag": "Monitoring",
      "logicHash": "rNxA7MdGOzs/WsXoEr4TTg",
      "ruleId": "D9.AWS.MON.04",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [ hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = ConsoleLogin) && ($.additionalEventData.MFAUsed != Yes) }') or filterPattern isFilterPatternEqual('{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != true }')] ] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the cloudtrail_log_group_name. Use following command:\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name no_mfa_console_signin_metric --metric-transformations metricName= no_mfa_console_signin_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.additionalEventData.MFAUsed != Yes) }'\n```\nNote: You can use below command to reduce false positives incase Single Sign-On (SSO) is used in organization:\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name  no_mfa_console_signin_metric --metric-transformations metricName= no_mfa_console_signin_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.additionalEventData.MFAUsed != Yes) && ($.userIdentity.type = IAMUser) && ($.responseElements.ConsoleLogin = Success) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n```\naws cloudwatch put-metric-alarm --alarm-name no_mfa_console_signin_alarm --metric-name no_mfa_console_signin_metric  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace METRIC_NAMESPACE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387884\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "ivL611FueFugX4S9c8LJCA",
      "ruleId": "D9.AWS.MON.02",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for S3 bucket policy changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies. Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) ||($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }')]length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name  `s3_bucket_policy_changes_metric`  --metric-transformations metricName= `s3_bucket_policy_changes_metric` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name  `s3_bucket_policy_changes_alarm`  --metric-name  `s3_bucket_policy_changes_metric`  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387895\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "UiW4MYzMcM6hyzZ2dwIfjg",
      "ruleId": "D9.AWS.MON.08",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for VPC changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateVpc) || ($.eventName =DeleteVpc) || ($.eventName =ModifyVpcAttribute) ||($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }')]] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name vpc_changes_metric --metric-transformations metricName= vpc_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name vpc_changes_alarm --metric-name vpc_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE_VALUE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387907\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "nssQ7UvCMv7Som8MWJS1mA",
      "ruleId": "D9.AWS.MON.14",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs. Monitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name nacl_changes_metric --metric-transformations metricName= nacl_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name nacl_changes_alarm --metric-name nacl_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE_VALUE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387901\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "YbrFxpfY3DRouLKlaiNdog",
      "ruleId": "D9.AWS.MON.11",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for changes to network gateways",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways. Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [ hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name network_gw_changes_metric --metric-transformations metricName= network_gw_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name network_gw_changes_alarm --metric-name network_gw_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE_VALUE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387903\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "A+/vhHvzhyaS2buGrf/rHg",
      "ruleId": "D9.AWS.MON.12",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion. Data encrypted with disabled or deleted keys will no longer be accessible.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name  `disable_or_delete_cmk_changes_metric`  --metric-transformations metricName= `disable_or_delete_cmk_changes_metric` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name  `disable_or_delete_cmk_changes_alarm`  --metric-name  `disable_or_delete_cmk_changes_metric`  --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387893\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "Da7h6lmr/hVVSdH9SGvCbA",
      "ruleId": "D9.AWS.MON.07",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for route table changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables. Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name  route_table_changes_metric --metric-transformations metricName= route_table_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name route_table_changes_alarm --metric-name route_table_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE_VALUE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387905\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "iyrOlVFUD9vRT8n/U0rMxQ",
      "ruleId": "D9.AWS.MON.13",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for security group changes",
      "description": "Monitoring changes to security group will help ensure that resources and services are not unintentionally exposed. ",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual ('{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name security_group_changes_metric --metric-transformations metricName= security_group_changes_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filter-pattern { ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name security_group_changes_alarm --metric-name  security_group_changes_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE_VALUE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387899\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "sO7cmN5wguWDxX2hW/6BRQ",
      "ruleId": "D9.AWS.MON.10",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for unauthorized API calls",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls. Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{(($.errorCode=\"*UnauthorizedOperation\") || ($.errorCode=\"AccessDenied*\")) && (($.sourceIPAddress!=\"delivery.logs.amazonaws.com\") && ($.eventName!=\"HeadBucket\"))}')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\n\n1. Create a metric filter based on filter pattern relevant for this check. Run following commands.\n```\naws logs put-metric-filter --region REGION_NAME --log-group-name NAME_OF_LOG_GROUP --filter-name  AWSAuthorizationFailures --filter-pattern ADD_FILTER_PATTERN --metric-transformations metricName=AuthorizationFailureCount,metricNamespace=CloudTrailMetrics,metricValue=1\n```\n2. Create an SNS topic that the alarm will notify\n```\naws sns create-topic --name SNS_TOPIC_NAME\n```\n\n3. Create an SNS subscription to the topic created in step 2\n```\naws sns subscribe --topic-arn sns_topic_arn from step 2 --protocol PROTOCOL_FOR_SNS --notification-endpoint SNS_SUBSCRIPTION_ENDPOINT\n```\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n```\naws cloudwatch put-metric-alarm --alarm-name  UNAUTHORIZED_API_CALLS_ALARM  --metric-name  UNAUTHORIZED_API_CALLS_METRIC  --statistic SUM --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace CISBenchmark --alarm-actions sns_topic_arn\n```\n**References**\n1. CIS Amazon Web Services Foundations Benchmark v1.3.0 - https://workbench.cisecurity.org/benchmarks/679\n2. Count Log Events - https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CountingLogEventsExample.html",
      "complianceTag": "Monitoring",
      "logicHash": "RlVY3Ca9SEKCuum63uloaQ",
      "ruleId": "D9.AWS.MON.01",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exist for usage of 'root' account",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts. Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.\nNote: Government cloud accounts do not have a root user, and so, should exclude this rule in the CloudGuard UI -> Posture Management -> Exclusions -> Create New Exclusion (for each relevant ruleset)",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ $.userIdentity.type = Root && $.userIdentity.invokedBy NOT EXISTS && $.eventType != AwsServiceEvent }')] length() > 0]",
      "remediation": "\n**From Portal**\nPerform the following steps to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.5.0: https://workbench.cisecurity.org/benchmarks/7366\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern provided and CloudWatch log group.\n```\naws logs put-metric-filter --log-group-name cloudtrail_log_group_name --filter-name root_usage_metric --metric-transformations metricName=root_usage_metric ,metricNamespace=METRIC_NAMESPACE,metricValue=1 --filterpattern '{ $.userIdentity.type = Root && $.userIdentity.invokedBy NOT EXISTS && $.eventType != AwsServiceEvent }'\n```\nNote: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n\n2. Create an SNS topic that the alarm will notify.\n```\naws sns create-topic --name sns_topic_name\n```\nNote: you can execute this command once and then re-use the same topic for all monitoring alarms.\n\n3. Create an SNS subscription to the topic created in step 2.\n```\naws sns subscribe --topic-arn sns_topic_arn --protocol protocol_for_sns --notification-endpoint sns_subscription_endpoints\n```\nNote: you can execute this command once and then re-use the SNS subscription for all.\n\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2.\n```\naws cloudwatch put-metric-alarm --alarm-name root_usage_alarm --metric-name root_usage_metric --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace METRIC_NAMESPACE --alarm-actions sns_topic_arn\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/844440/recommendations/1387886\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/US_SetupSNS.html\n3. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html\n4. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html ",
      "complianceTag": "Monitoring",
      "logicHash": "TzjjandyFJPFzq+EecCI9A",
      "ruleId": "D9.AWS.MON.03",
      "category": "Baseline"
    },
    {
      "name": "Ensure a log metric filter and alarm exists for AWS Organizations changes",
      "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
      "severity": "Low",
      "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }')]] length() > 0]",
      "remediation": "\n**From Portal**\nA. To create a metric filter using the CloudWatch console\n1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.\n2. In the navigation pane, choose Log groups.\n3. Choose the name of the log group.\n4. Choose Actions, Create metric filter.\n5. For Filter pattern, enter the filter pattern to use:\n{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }\n6. Choose Next, and then enter a name for the filter.\n7. Under Metric details, for Metric namespace, enter a name for the CloudWatch namespace where the metric will be published. If this namespace doesn't already exist, be sure that Create new is selected.\n8. For Metric name, enter a name for the new metric.\n9. For Metric value, if your metric filter is counting occurrences of the keywords in the filter, enter 1.\n10. Choose Create metric filter.\n\nB. Create an SNS topic that the alarm will notify here: https://ap-south-1.console.aws.amazon.com/sns\n\nC. Create an SNS subscription to the topic created in step B here: https://ap-south-1.console.aws.amazon.com/sns\n\nD. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step A and an SNS topic created in step B here: https://ap-south-1.console.aws.amazon.com/cloudwatch\n\n**From TF**\nTo create log metric filter for AWS Organization changes:\n```\nresource \"aws_cloudwatch_log_metric_filter\" \"yada\" {\nname           = NAME\npattern        = RELEVANT-FILTER-PATTERN\nlog_group_name = LOG-GROUP-NAME\n...\n}\n```\n\n**From Command Line**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the LOG-GROUP-NAME\n```\naws logs put-metric-filter --log-group-name LOG-GROUP-NAME --filter-name FILTER-NAME --metric-transformations metricName=METRIC-NAME,metricNamespace=METRIC-NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }'\n```\n2. Create an SNS topic that the alarm will notify:\n```\naws sns create-topic --name SNS-TOPIC-NAME\n```\n3. Create an SNS subscription to the topic created in step 2:\n```\naws sns subscribe --topic-arn SNS-TOPIC-ARN --protocol PROTOCOL --notification-endpoint SNS-ENDPOINT\n```\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:\n```\naws cloudwatch put-metric-alarm --alarm-name ALARM-NAME --metric-name METRIC-NAME --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace METRIC-NAMESPACE --alarm-actions SNS-TOPIC-ARN\n```\n\n**References**\n1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CreateMetricFilterProcedure.html\n2. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\n3. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_metric_filter\n5. https://docs.aws.amazon.com/cli/latest/reference/logs/put-metric-filter.html",
      "complianceTag": "4.15 | Monitoring",
      "logicHash": "2zYqZpAlBOPelbM5Ss12Nw",
      "ruleId": "D9.AWS.MON.24",
      "category": "Baseline"
    },
    {
      "name": "Ensure a support role has been created to manage incidents with AWS Support",
      "description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support. By implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.",
      "severity": "Low",
      "logic": "IamPolicy where name='AWSSupportAccess' should not have users isEmpty() and roles isEmpty() and groups isEmpty()",
      "remediation": "\n**From Portal:**\n1. Sign into the AWS console and open the IAM Dashboard.\n2. In the left navigation pane, click Roles and then choose Create Role.\n3. For Role type, choose the Another AWS account.\n4. For Account ID, enter the AWS account ID of the AWS account to which you want to grant access to your resources.\n5. Choose Next: Permissions.\n6. Search for the managed policy AWSSupportAccess.\n7. Select the check box for the AWSSupportAccess managed policy.\n8. Choose Next: Tags.\n9. Choose Next: Review.\n10. For Role name, enter a name for your role. Then click Create role.\n\n**From Command Line:**\n1. Create an IAM role for managing incidents with AWS:\n- Create a trust relationship policy document that allows <iam_user> to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\n```\n{\n\"Version\":\"2012-10-17\",\n\"Statement\":[\n{\n\"Effect\":\"Allow\",\n\"Principal\":{\n\"AWS\":\"<iam_user>\"\n},\n\"Action\":\"sts:AssumeRole\"\n}\n]\n}\n```\n2. Create the IAM role using the above trust policy:\n```\naws iam create-role --role-name aws_support_iam_role --assume-role-policy-document file:///tmp/TrustPolicy.json\n```\n3. Attach 'AWSSupportAccess' managed policy to the created IAM role:\n```\naws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name aws_support_iam_role\n```\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html\n3. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\n4. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\n5. https://docs.aws.amazon.com/cli/latest/reference/iam/create-user.html\n6. https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html\n7. https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html\n8. https://workbench.cisecurity.org/benchmarks/679 ",
      "complianceTag": "1.17 | Identity and Access Management",
      "logicHash": "NFoJMkFFcqlvNL1VESSzmg",
      "ruleId": "D9.AWS.IAM.25",
      "category": "Baseline"
    },
    {
      "name": "Ensure credentials unused for 90 days or greater are disabled (Console password)",
      "description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be deactivated or removed.\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.",
      "severity": "Low",
      "logic": "IamUser where passwordEnabled='true' should have passwordLastUsed after(-90, 'days')",
      "remediation": "\n**From Portal**\n1. Login to the AWS Management Console\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Click on Security Credentials\n6. In section Sign-in credentials, Console password click Manage\n7. Under Console Access select Disable\n8. Click Apply\n\n**From Command Line**\nTo disable an IAM User console password, run:\n```\naws iam delete-login-profile --user-name USER-NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html\n2. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/delete-login-profile.html\n",
      "complianceTag": "Identity and Access Management",
      "logicHash": "PSG3VeFeD/LuNQ7xAwYXgg",
      "ruleId": "D9.AWS.IAM.04",
      "category": "Baseline"
    },
    {
      "name": "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
      "description": "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS  website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device. It is recommended to enabe MFA for all accounts that have a console password. Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
      "severity": "Low",
      "logic": "IamUser where passwordEnabled='true' should have mfaActive='true'",
      "remediation": "\n**From Portal**\nPerform the following steps to enable MFA:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. In the navigation pane, choose Users.\n3. In the User Name list, choose the name of the intended MFA user.\n4. Choose the Security Credentials tab, and then choose Manage MFA Device.\n5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.\nNote: IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n7.1 Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n7.2 In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application. When you are finished, the virtual MFA device starts generating one-time passwords.\n8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.\n\n**From Command Line**\n1.\tFirst of all we need to create the virtual MFA device.\n```\naws iam create-virtual-mfa-device --virtual-mfa-device-name MFA_DEVICE_NAME --outfile FILENAME.PNG --bootstrap-method QRCodePNG\n```\n2.\tSync your mobile device with the desired MFA authenticator.\nNote: You need to open Authenticator app and scan the QRCode generated from above step.\n\n3.\tGenerate two authentication codes with the MFA authenticator, Note down the codes and use those in below command.\n\n4.\tNext step is to enable the virtual MFA device for user using the two MFA codes generated in previous step.\n```\naws iam enable-mfa-device --user-name USER_NAME --serial-number MFA_DEVICE_ARN --authentication-code1 ENTER CODE1 --authentication-code2 ENTER CODE2\n```\n\n**References**\n1. https://workbench.cisecurity.org/sections/43739/recommendations/115378\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html\n3. https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#enable-mfa-for-privileged-users\n4. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html",
      "complianceTag": "Identity and Access Management",
      "logicHash": "mkw5QPVL/sfHn1ZCnIhxLw",
      "ruleId": "D9.AWS.IAM.02",
      "category": "Baseline"
    },
    {
      "name": "Ensure only usable Customer Managed Keys are in the AWS KMS",
      "description": "CMKs are enabled by default. If you disable a CMK, or schedule it for deletion, it becomes unusable, and cannot be used to encrypt or decrypt data. It is recommended to remove all the KMS Customer Managed Keys (CMKs) that are not usable to ensure proper key management process and to lower your monthly AWS bill.",
      "severity": "Low",
      "logic": "KMS where isCustomerManaged=true should not have keyState='Disabled' or keyState='PendingDeletion'",
      "remediation": "\n**From Portal**\nUse following steps to enable KMS CMKs which are disabled:\n1. Sign into the AWS console\n2. In the console, select the specific region\n3. Navigate to Key Management Service (KMS)\n4. Click 'Customer managed keys' (Left Panel)\n5. Select reported KMS Customer managed key\n6. Click 'Key actions' dropdown\n7. Click 'Enable'\n\nDelete CMKs only when you are sure that you don't need to use them anymore. If you are not sure, consider disabling the CMK instead of deleting it. To enable KMS CMKs which are scheduled for deletion, perform the following:\n1. Sign into the AWS console\n2. In the console, select the specific region\n3. Navigate to Key Management Service (KMS)\n4. Click 'Customer managed keys' (Left Panel)\n5. Select reported KMS Customer managed key\n6. Click 'Key actions' dropdown\n7. Click 'Cancel key deletion'\n8. Click 'Enable'\n\n**From TF**\nUse following terraform code to enable a KMS key\n```\nresource \"aws_kms_key\" \"example1\" {\nkey_id = \"kms_key_id\"\n+ is_enabled = true\n}\n```\n\n**From Command Line**\nRun following command to cancel the AWS KMS key deletion process (to recover the KMS key scheduled for deletion):\n```\naws kms cancel-key-deletion --region AWS_region_name --key-id kms_key_id\n```\nUse following command to enable a KMS key:\n```\naws kms enable-key --key-id kms_key_id\n```\n\n**References**\n1. https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html\n2. https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html\n3. https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_key\n5. https://docs.aws.amazon.com/cli/latest/reference/kms/schedule-key-deletion.html\n6. https://docs.aws.amazon.com/cli/latest/reference/kms/cancel-key-deletion.html\n7. https://docs.aws.amazon.com/cli/latest/reference/kms/enable-key.html ",
      "complianceTag": "Operational",
      "logicHash": "wvo3RhrHt2ROGjxM03s2TA",
      "ruleId": "D9.AWS.OPE.06",
      "category": "Baseline"
    },
    {
      "name": "Ensure security contact information is registered",
      "description": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.",
      "severity": "Low",
      "logic": "Account should have alternateContacts with [ alternateContactType='SECURITY' ]",
      "remediation": "\n**From Console\n1. Sign in to the AWS Management Console https://console.aws.amazon.com/\n2. Click on your account name at the top right corner of the console.\n3. From the drop-down menu Click My Account\n4. Scroll down to the Alternate Contacts section\n5. Enter contact information in the Security section,Update.\n\n\n**From Command Line**\n1. Use below command to update the alternateContacts\n```\naws account put-alternate-contact [--account-id VALUE] --alternate-contact-type VALUE --email-address VALUE --name VALUE --phone-number VALUE --title VALUE [--cli-input-json VALUE ] [--generate-cli-skeleton VALUE]\n```\nFor example:\n```\naws account put-alternate-contact --alternate-contact-type SECURITY --email-address test@example.com  --name Example --phone-number +1234567890 --title Example\n```\n\n**From TF**\n1. Use resource: aws_account_alternate_contact and update the arguments. Make sure type SECURITY.\n\nresource \"aws_account_alternate_contact\" \"SECURITY\" {\nalternate_contact_type = \"SECURITY\"\nname          = \"Example\"\ntitle         = \"Example\"\nemail_address = \"test@example.com\"\nphone_number  = \"+1234567890\"\n}\n\n**References**\n1. https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-update-contact.html\n2. https://docs.aws.amazon.com/cli/latest/reference/account/put-alternate-contact.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/account_alternate_contact",
      "complianceTag": "Operational",
      "logicHash": "D9XczwtDy5kEoOgSzU1a9A",
      "ruleId": "D9.AWS.OPE.22",
      "category": "Baseline"
    },
    {
      "name": "Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
      "description": "เรื่องการ Enforce ในกรณีที่ Cert หมดอายุ Removing expired SSL/TLS certificates prevents accidental invalid certificate usage and is recommended as a best practice.",
      "severity": "Low",
      "logic": "IamServerCertificate should not have expiration before(0, 'days')",
      "remediation": "\n**From Command Line**\nTo list all IAM server certificates, run:\n```\naws iam list-server-certificates\n```\nTo delete an expired IAM server certificate, run:\n```\naws iam delete-server-certificate --server-certificate-name CERTIFICATE-NAME\n```\n\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\n2. https://docs.aws.amazon.com/cli/latest/reference/iam/delete-server-certificate.html\n",
      "complianceTag": "1.19 | Encryption and Key Management",
      "logicHash": "eRPUO4HUpUjQxUWRi5N/2Q",
      "ruleId": "D9.AWS.CRY.56",
      "category": "Baseline"
    },
    {
      "name": "Ensure the number of private gateways is within the AWS limit for each region",
      "description": "Checks the number of private gateways in each AWS region in your account is not close to the AWS imposed limit.  If the number of gateways approaches the limit in a particular VPC, you will receive an alert. As per AWS recommendation Virtual private gateway per region limit is 5. This policy will trigger an alert if Virtual private gateway per region reached 80% (i.e. 4) of resource availability limit allocated.",
      "severity": "Low",
      "logic": "VPC should not have vpnGateways length()>3",
      "remediation": "\n**From Portal**\n1. Log in to the AWS console.\n2. In the console, select the specific region.\n3. Navigate to VPC Dashboard.\n4. Click 'Virtual Private Gateways'.\n5. Select the Virtual Private Gateway you want to delete, which is not used or required.\n6. Click 'Actions' dropdown.\n7. Click 'Virtual Private Gateway'.\n8. In the 'Delete Virtual Private Gateway' popup dialog, click 'Yes, Delete'\n\nNOTE: If Virtual Private Gateway is already in use it can not be deleted. Make sure to un-associate VPC gateways before deleting it. If existing Virtual Private Gateways are properly associated and exhausted your VPC Virtual Private Gateway limit allocation, you can contact AWS for a service limit increase.\n\n**From Command Line**\nUse following command to delete a VPC gateway:\n```\naws ec2 delete-vpn-gateway --vpn-gateway-id gateway_id\n```\nNote:  You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.\n\n**References**\n1. http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\n2. https://docs.aws.amazon.com/general/latest/gr/vpc-service.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/delete-vpn-gateway.html ",
      "complianceTag": "Operational",
      "logicHash": "Kp+DAhilBs2vYEDjw3uw5w",
      "ruleId": "D9.AWS.OPE.09",
      "category": "Baseline"
    },
    {
      "name": "Identify unused AWS VPCs",
      "description": "It is recommended to delete these VPCs that do not have resources attached to them to reduce AWS cost.",
      "severity": "Low",
      "logic": "VPC should have subnets length()>=1",
      "remediation": "\n**From Portal**\n1. Log in to the AWS console.\n2. In the console, select the specific region.\n3. Navigate to VPC Dashboard.\n4. Click 'Your VPCs' and select the reported VPC.\n5. If you want to use the reported VPC, associate subnets to the VPC.\n6. If you want to delete the VPC, click 'Actions' and select 'Delete VPC' from the dropdown.\n\n**From Command Line**\nUse following command to delete a unused VPC:\n```\naws ec2 delete-vpc --vpc-id vpc_id\n```\n\n**References**\n1. https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html#VPC_Deleting\n2. https://docs.aws.amazon.com/vpc/latest/userguide/working-with-subnets.html\n3. https://docs.aws.amazon.com/prescriptive-guidance/latest/aws-startup-security-baseline/acct-09.html\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/delete-vpc.html ",
      "complianceTag": "Operational",
      "logicHash": "h69FXnDx5oMJDB/H6Cw8iw",
      "ruleId": "D9.AWS.OPE.10",
      "category": ""
    },
    {
      "name": "Password Policy must require at least one number",
      "description": "It is recommended that the password policy require at least one number. Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure passwords consist of different character sets. Setting a password complexity policy increases account resiliency against brute force login attempts.",
      "severity": "Low",
      "logic": "Iam should have passwordPolicy.requireNumbers=true",
      "remediation": "\n**From Portal**\nPerform the following to set the password policy as prescribed: Via AWS Console\n1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n2. Go to IAM Service on the AWS Console\n3. Click on Account Settings on the Left Pane\n4. Check 'Require at least one number'\n5. Click 'Apply password policy'\n\n**From TF**\n```\nresource \"aws_iam_account_password_policy\" \"test\" {\nminimum_password_length        = 8\nrequire_lowercase_characters   = true\n+ require_numbers                = true\nrequire_uppercase_characters   = true\nrequire_symbols                = true\nallow_users_to_change_password = true\n}\n```\n**From Command Line**\nTo add a password policy with required condition, run:\n```\naws iam update-account-password-policy --require-numbers\n```\n**References**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n2. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n3. https://docs.aws.amazon.com/config/latest/developerguide/iam-password-policy.html\n4. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n5. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/get-account-password-policy.html\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_account_password_policy",
      "complianceTag": "Identity and Access Management",
      "logicHash": "G3LbqsCtDDlA9JbndVu9QA",
      "ruleId": "D9.AWS.IAM.11",
      "category": "Baseline"
    }
  ]